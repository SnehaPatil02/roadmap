import { Injectable } from "@angular/core";
import { Data, DataService } from "../utils/data-utils";

@Injectable({
  providedIn: "root",
})
export class SpringBootDataService extends DataService {
  override data: { [key: string]: Data } = {
    "spring-boot": new Data(
      "spring-boot",
      ``,
      "white",
      [
        "Spring",
        "Spring MVC",
        "Testing",
        "Spring Security",
        "Microservices",
        "Hibernate",
        "Spring Data",
      ],
      false,
      "0",
    ),
    Spring: new Data(
      "Spring",
      `<h2>Spring</h2>        <div class="flex-1">        <p>Spring is an open-source framework that provides a comprehensive programming and configuration model for modern Java-based enterprise applications. The core module of Spring, also known as the "Spring Core" module, is at the heart of the framework and provides the fundamental functionality for dependency injection (DI) and inversion of control (IoC). In addition to dependency injection, the Spring Core module also provides several other features, such as:</p>        <ul class="mt-6 space-y-1">            <li>A flexible and extensible validation framework</li>            <li>A type conversion system</li>            <li>A consistent messaging framework</li>        </ul>        You can learn more about Spring Core from the links below:        <ul class="mt-6 space-y-1">            <a href="https://spring.io/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Official website</span>            </a><br>            <a href="https://spring.io/why-spring" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Official Documentation</span>            </a><br>            <a href="https://spring.io/guides/gs/spring-boot/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Getting Started with Spring</span>            </a><br>            <a href="https://www.tutorialspoint.com/spring/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Spring Core Tutorial</span>            </a><br>        </ul>        <p>- [Video: Spring Framework](https://www.youtube.com/playlist?list=PLC97BDEFDCDD169D7)</p>                </div>          `,
      "yellow",
      [],
      true,
      "10",
    ),
    "Spring MVC": new Data(
      "Spring MVC",
      `<h2>Spring MVC</h2>        <div class="flex-1">        <p>Spring MVC is a web application framework that is part of the Spring Framework. It is designed to make it easy to build web applications using the Model-View-Controller (MVC) design pattern.</p>        <ul class="mt-6 space-y-1">        <li>In Spring MVC, the application is divided into three main components: the Model, the View, and the Controller. The Model represents the data and the business logic of the application, the View is responsible for generating the HTML that is sent to the client's web browser, and the Controller acts as an intermediary between the Model and the View, handling incoming HTTP requests and generating the appropriate response.</li>        </ul>        For more information, visit the following links:<br>        <ul class="mt-6 space-y-1">        <a href="https://www.javatpoint.com/spring-mvc-tutorial" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Spring MVC Tutorial</a><br>        <a href="https://www.tutorialspoint.com/spring/spring_web_mvc_framework.htm" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Spring - MVC Framework</a><br>        <a href="https://www.edureka.co/blog/spring-mvc-tutorial/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Spring MVC Tutorial â€“ Everything You Need To Know</a><br>        <a href="https://app.daily.dev/tags/spring?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Feed</span>Explore top posts about Spring Framework</a><br>         </ul>           </div>        `,
      "yellow",
      [],
      true,
      "10",
    ),
    "Spring Data": new Data(
      "Spring Data",
      `<h2>Spring Data</h2>        <div class="flex-1">        <p>Spring Data is a collection of projects for data access in Spring-based applications. It provides a common interface for working with various types of data stores, including relational databases, NoSQL data stores, and cloud-based data services. The goal of Spring Data is to simplify data access in Spring applications by providing a consistent, high-level repository programming model across different data stores and data access technologies. This can help developers write less boilerplate code and focus on business logic, while still being able to take advantage of the full power of the underlying data store.</p>        <ul class="mt-6 space-y-1">        <li>For more resources, visit the following links:</li><br>         <ul class="mt-6 space-y-1">        <li><a href="https://spring.io/projects/spring-data" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">official</a></li>        <li><a href="https://www.infoq.com/articles/spring-data-intro/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">article</a></li>        <li><a href="https://www.amitph.com/jpa-and-spring-data-jpa/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">article</a></li>        <li><a href="https://app.daily.dev/tags/spring?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">feed</a></li>         </ul>        </ul>        </div>        `,
      "yellow",
      [],
      true,
      "10",
    ),
    Testing: new Data(
      "Testing",
      `<h2>Testing</h2>        <div class="flex-1">        <p>Spring provides a set of testing utilities that make it easy to test the various components of a Spring application, including controllers, services, repositories, and other components. It has a rich set of testing annotations, utility classes and other features to aid in unit testing, integration testing and more.</p>        For more information, visit the following links:<br>        <ul class="mt-6 space-y-1">        <li><a href="https://www.developer.com/design/what-is-spring-testing/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">What Is Spring Testing?</a></li>        <li><a href="https://www.lambdatest.com/blog/spring-testing/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Complete Guide To Spring Testing</a></li>         </ul>        </div>          `,
      "yellow",
      [],
      true,
      "10",
    ),
    Hibernate: new Data(
      "Hibernate",
      `<h2>Hibernate</h2>        <div class="flex-1">        <p>Hibernate is a Java framework that provides an object-relational mapping to an object-oriented model to the relational database. It means hibernate provides from Java classes to database tables and also provides data querying and retrieval facility.</p>        For more resources, visit the following links:<br>        <ul class="mt-6 space-y-1">        <a href="https://www.educba.com/spring-vs-hibernate/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Difference Between Spring vs Hibernate </a><br>        <a href="https://www.digitalocean.com/community/tutorials/spring-hibernate-integration-example-tutorial" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Spring Hibernate Integration Example</a>        </ul>        </div>        `,
      "yellow",
      [],
      true,
      "10",
    ),
    "Spring Security": new Data(
      "Spring Security",
      `<h2>Spring Security</h2>        <div class="flex-1">        <p>Spring Security is a framework for securing Java-based applications. It is a powerful and highly customizable authentication and access-control framework that can be easily integrated with a wide variety of applications, including web applications and RESTful web services. Spring Security provides a comprehensive security solution for both authentication and authorization, and it can be used to secure applications at both the web and method level.</p>        <ul class="mt-6 space-y-1">        <li>Visit the following links for more resources:</li>        <li><a href="https://spring.io/projects/spring-security" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Official Spring Security</a></li>         <li><a href="https://www.javatpoint.com/spring-security-introduction" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Spring Security Introduction</a></li>        <li><a href="https://www.javadevjournal.com/spring/what-is-spring-security" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">What is Spring Security</a></li>        <li><a href="https://www.marcobehler.com/guides/spring-security" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Spring Security: Authentication and Authorization In-Depth</a></li>        <li><a href="https://app.daily.dev/tags/security?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Explore top posts about Security</a></li>         </ul>       </div>        `,
      "yellow",
      [],
      true,
      "10",
    ),
    Microservices: new Data(
      "Microservices",
      `<h2>Microservices</h2>        <div class="flex-1">        <p>Spring Microservices is a framework that makes it easier to build and manage microservices-based applications using the Spring Framework. Microservices is an architectural style in which a large application is built as a collection of small, independently deployable services. Each service has a narrowly defined responsibility and communicates with other services through APIs.</p>        <ul class="mt-6 space-y-1">        <li>For more resources, visit the following links:</li>        <li><a href="https://spring.io/microservices" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Official Microservices with Spring</a></li>        <li><a href="https://www.javatpoint.com/microservices" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Microservices Tutorial</a></li>        <li><a href="https://medium.com/omarelgabrys-blog/microservices-with-spring-boot-intro-to-microservices-part-1-c0d24cd422c3" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Microservices with Spring Boot</a></li>        <li><a href="https://app.daily.dev/tags/microservices?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Explore top posts about Microservices</a></li>        </ul>        </div>    `,
      "yellow",
      [],
      true,
      "10",
    ),
    Autoconfiguration: new Data(
      "Autoconfiguration",
      `<h2>Autoconfiguration</h2>        <div class="flex-1">        <p>Spring Boot's Autoconfiguration is a powerful and convenient feature that makes it easy to configure beans and other components in your application based on the presence of certain dependencies and properties. It saves developer's time by reducing the need for boilerplate configuration code, and can be fine-tuned through properties and annotations, to provide a fine-grained control over the auto-configurations.</p>        <ul class="mt-6 space-y-1">        <li>For more information, visit the following links:</li>        </ul>       <div class="flex-1 flex items-center justify-start" >            <a href="https://docs.spring.io/spring-boot/docs/2.0.x/reference/html/using-boot-auto-configuration.html" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Auto-configuration using Spring Boot</a>        </div>       <div class="flex-1 flex items-center justify-start" >            <a href="https://www.javatpoint.com/spring-boot-auto-configuration" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Spring Boot Auto-configuration</a>        </div>    </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    Actuators: new Data(
      "Actuators",
      `<h2>Actuators</h2>        <div class="flex-1">        <p>Spring Boot Actuators are a set of production-ready features in Spring Boot that allow you to monitor and manage your application in various ways. They provide a variety of endpoints that expose information about the health and performance of your application, and allow you to perform various management tasks such as shutting down the application or refreshing its configuration.</p>        <ul class="mt-6 space-y-1">          <li>Some of the key features of Spring Boot Actuators include:</li>           <ul class="mt-6 space-y-1">            <li>Health endpoint: Exposes information about the health of the application, such as whether it is up and running, and any issues it may be experiencing.</li>             <li>Metrics endpoint: Exposes metrics about the performance of the application, such as CPU and memory usage, and number of requests handled.</li>             <li>Info endpoint: Exposes arbitrary information about the application, such as version number, and build information.</li>             <li>Configuration endpoint: Exposes information about the configuration of the application, such as the properties and their values.</li>          </ul>        </ul>        <p>Actuator endpoints can be secured, rate-limited and customized with various options and properties.</p>                 <h3> Usage</h3>         <p>Spring Boot Actuators are typically used in production environments to monitor the health and performance of an application and identify any issues that may arise. They can also be used in development and testing environments to gain insight into the internal workings of the application.</p>          <p>For more information, visit the following links:</p>        <ul class="mt-6 space-y-1">          <li><a href="https://spring.io/guides/gs/actuator-service/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Building a RESTful Web Service with Spring Boot Actuator</a></li>           <li><a href="https://www.javatpoint.com/spring-boot-actuator" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Spring Boot Starter Actuator</a></li>           <li><a href="https://www.baeldung.com/spring-boot-actuators" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">What is Spring Boot Actuator</a></li>           <li><a href="https://app.daily.dev/tags/spring?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Explore top posts about Spring Framework</a></li>          </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Spring Boot Starters": new Data(
      "Spring Boot Starters",
      `<h2>Spring Boot Starters</h2>        <div class="flex-1">        <p>Spring Boot starters are a set of convenient dependency descriptors that you can include in your application. They provide a variety of functionality, such as security, data access, and web services, and help to minimize the amount of boilerplate code and configuration you need to write.</p>        For more information, visit the following links:        <ul class="mt-6 space-y-1">            <a href="https://www.baeldung.com/spring-boot-starters" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Intro to Spring Boot Starters            </a>        </ul>        <ul class="mt-6 space-y-1">            <a href="https://www.javatpoint.com/spring-boot-starters" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Spring Boot Starters            </a>        </ul>                 <h2>Explore top posts about Spring Framework</h2>        <div class="flex-1">        <a href="https://app.daily.dev/tags/spring?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">feed</span>Explore top posts about Spring Framework         </a>        </div>       `,
      "orange",
      [],
      true,
      "10",
    ),
    "Embedded Server": new Data(
      "Embedded Server",
      `<h2>Embedded Server</h2>        <div class="flex-1">        <p>Spring Boot's Embedded Server feature is a convenient and powerful feature that allows you to run a web server directly within your application, without the need to deploy it to a separate standalone web server. This makes it easy to develop, test, and deploy web applications, and it's also lightweight, easy to start and stop, and easy to configure.</p>        <ul class="mt-6 space-y-1">            <li>For more resources, visit the following links:</li>            <ul class="mt-6 space-y-1">                 <li><a href="https://subscription.packtpub.com/book/application-development/9781789132588/3/ch03lvl1sec24/embedded-servers" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                    <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Embedded Servers in Spring</a></li>                <li><a href="https://www.springboottutorial.com/java-programmer-essentials-what-is-an-embedded-server" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                    <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>What is an Embedded Server? (Spring Boot)</a></li>                <li><a href="https://docs.spring.io/spring-boot/docs/2.1.9.RELEASE/reference/html/howto-embedded-web-servers.html" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                    <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Embedded Web Servers â€˜How-toâ€™ guides</a></li>                <li><a href="https://app.daily.dev/tags/embedded?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                     <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">feed</span>Explore top posts about Embedded Systems </a></li>             </ul>        </div>  `,
      "orange",
      [],
      true,
      "10",
    ),
    "Dependency Injection": new Data(
      "Dependency Injection",
      `<h2>Dependency Injection</h2>        <div class="flex-1">        <p>Spring Boot uses the Spring Framework's Inversion of Control (IoC) container to manage objects and their dependencies. The IoC container is responsible for creating objects, wiring them together, and managing their lifecycle. When an object is created, its dependencies are also created and injected into the object.</p>        <ul class="mt-6 space-y-1">            <li>When an object is created, its dependencies are also created and injected into the object.</li>        </ul>        Visit the following links for more resources:<br>        <ul class="mt-6 space-y-1">            <a href="https://www.baeldung.com/spring-dependency-injection" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Spring Dependency Injection</a><br>            <a href="https://medium.com/edureka/what-is-dependency-injection-5006b53af782" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Dependency Injection Using Spring Boot</a><br>            <a href="https://www.javatpoint.com/dependency-injection-in-spring" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Dependency Injection in Spring </a><br>            <a href="https://app.daily.dev/tags/dependency-injection?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">feed</span>Explore top posts about Dependency Injection </a><br>        </ul>        </div>    `,
      "orange",
      [],
      true,
      "10",
    ),
    "Spring AOP": new Data(
      "Spring AOP",
      `<h2>Spring AOP</h2>        <div class="flex-1">        <p>Spring AOP (Aspect-Oriented Programming) is a feature of the Spring Framework that allows developers to define certain behaviors (i.e., "aspects") that cut across multiple classes, such as logging or transaction management. These behaviors, which are called "advices," can be applied to specific "join points" (i.e., points in the execution of a program) in the application, using "pointcuts" to determine where the advices should be applied.</p>        <ul class="mt-6 space-y-1">            <li>Spring AOP allows developers to separate the implementation of these cross-cutting concerns from the business logic of the application, making the code more modular and easier to understand. This can also make the application more flexible, since the same advices can be applied to different parts of the code without having to duplicate the code for the advices themselves.</li>        </ul>        <p>For more resources, visit the following links:</p>      <ul class="mt-6 space-y-1">         <a href="https://www.simplilearn.com/tutorials/spring-tutorial/spring-aop-aspect-oriented-programming" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Spring AOP Tutorial </a>          <a href="https://www.tutorialspoint.com/spring/aop_with_spring.htm" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>AOP with Spring Framework </a>          <a href="https://howtodoinjava.com/spring-aop-tutorial/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Spring AOP Tutorial </a>       <a href="https://app.daily.dev/tags/spring?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">         <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">feed</span>Explore top posts about Spring Framework </a>        </ul>        </div>    `,
      "orange",
      [],
      true,
      "10",
    ),
    Annotations: new Data(
      "Annotations",
      `<h2>Annotations</h2>        <div class="flex-1">        <p>One of the key features of Spring Boot is its use of annotations, which are used to configure various aspects of the application and to enable certain features.</p>        Some of the most commonly used annotations in Spring Boot include:</p>        <ul class="mt-6 space-y-1">            <li><code>@SpringBootApplication</code></li>            <li><code>@RestController</code></li>            <li><code>@Autowired</code></li>            <li><code>@Value</code></li>            <li><code>@Enable</code></li>            <li><code>@Configuration</code></li>            <li><code>@Bean</code></li>        </ul>         These are just a few examples of the many annotations that are available in Spring Boot. There are many other annotations that you can use to configure various aspects of your application, such as security, caching, and data access.</p>        <div class="flex-1">            <p> Visit the following link for more details on annotations in spring boot:</p>            <ul class="mt-6 space-y-1">                <a href="https://www.digitalocean.com/community/tutorials/spring-annotations" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                    Spring Annotations                </a><br>                <a href="https://www.javatpoint.com/spring-boot-annotations" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                    Spring Boot Annotations                 </a><br>                <a href="https://www.techferry.com/articles/spring-annotations.html" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                    Annotations in Spring                 </a>            </ul>        </div>`,
      "orange",
      [],
      true,
      "10",
    ),
    Configuration: new Data(
      "Configuration",
      `<h2>Configuration</h2>        <div class="flex-1">        <p>Spring Core Configuration is the process of configuring the Spring Framework, which involves specifying the various configuration details required for an application to function properly. This can include setting up beans, specifying bean dependencies, configuring aspect-oriented programming (AOP) aspects, and more. Configuration can be done through Java code, XML files, or using annotations in the code.</p>        <ul class="mt-6 space-y-1">          <li>To learn more about Spring Core Configuration from the links below:</li>          <li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Spring Framework Documentation</a></li>          <li><a href="https://www.baeldung.com/project-configuration-with-spring" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Spring Configuration tutorial</a></li>          <li><a href="https://www.tutorialspoint.com/spring/index.htm" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Spring Framework tutorial</a></li>          </ul>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Spring IOC": new Data(
      "Spring IOC",
      `<h2>Spring IOC</h2>        <div class="flex-1">        <p>Inversion of Control (IoC) is a design pattern that is often used in conjunction with the Dependency Injection (DI) pattern. The basic idea behind IoC is to invert the flow of control in a program, so that instead of the program controlling the flow of logic and the creation of objects, the objects themselves control the flow of logic and the creation of other objects.</p>        <ul class="mt-6 space-y-1">         <li>Spring is a popular Java framework that uses IoC and DI to provide a more flexible, modular approach to software development.</li>          <li>The Spring IoC container is responsible for managing the creation and configuration of objects in a Spring-based application.</li>        </ul>        <p> The Spring IoC container creates objects, wires them together, configures them, and manages their complete lifecycle from creation till destruction. This removes the burden of instantiating and configuring objects from the application code, and allows the application code to focus on the business logic rather than on infrastructure concerns.</p>        <ul class="mt-6 space-y-1">         <li>Spring IoC container provides two ways to configure the objects: </li>        </ul>        <ul class="mt-6 space-y-1">          <li> - XML based configuration</li>          <li>- Annotation based configuration</li>        </ul>     <p>In XML based configuration, you use XML file to describe the configuration metadata and the container creates the objects and wire them together.</p>      <p> In Annotation based configuration, you use annotations in the Java source code to describe the configuration metadata and the container creates the objects and wire them together.  Both way, Spring IoC container can be used to create, manage, and wire together objects in a Spring-based application, using a variety of different strategies, including constructor injection, setter injection, and interface injection.</p>         <ul class="mt-6 space-y-1">          <li>Overall, Spring IoC container provides a central location to manage the lifecycle and configuration of objects in an application, making it easier to develop, test, and maintain the code.</li>        </ul>          <h2>More Resources</h2>       <ul class="mt-6 space-y-1">      <a href="https://www.digitalocean.com/community/tutorials/spring-ioc-bean-example-tutorial" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black"> Spring IoC, Spring Bean Example Tutorial</a>      <a href="https://www.baeldung.com/inversion-control-and-dependency-injection-in-spring" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Intro to Inversion of Control with Spring</a>      <a href="https://www.javatpoint.com/ioc-container" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">IoC Container </a>      <a href="https://app.daily.dev/tags/spring?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Explore top posts about Spring Framework</a>    </ul>   `,
      "orange",
      [],
      true,
      "10",
    ),
    "Spring Bean Scope": new Data(
      "Spring Bean Scope",
      `<h2>Spring Bean Scope</h2>        <div class="flex-1">        <p>In the Spring Framework, a bean is an object that is instantiated, assembled, and managed by the Spring IoC container. One of the key features of the Spring container is its ability to manage the lifecycle of beans, which includes creating, configuring, and destroying beans as necessary. One way the container can control the lifecycle of a bean is by specifying its scope.</p>        <ul class="mt-6 space-y-1">            <li>The scope of a bean determines the lifecycle and visibility of the bean within the container and to other objects in the application.</li>            <li>Spring provides several different bean scopes, including: </li>             <li>- **singleton**: This is the default scope for a bean. A singleton bean is instantiated only once by the container and shared by all objects that request it.</li>             <li>- **prototype**: This scope means that the container creates a new instance of the bean every time a request is made for it.</li>             <li>- **request**: This scope is only applicable to web applications and means that the container creates a new instance of the bean for each HTTP request.</li>            <li>- **session**: Similar to the request scope, but the instance of the bean is created for each HTTP session, </li>             <li>- **application**: This scope is for global application-level data, and only valid in a web-aware Spring ApplicationContext.</li>            <li>- **websocket**: This scope is for global WebSocket-level data, and also only valid in a web-aware Spring ApplicationContext.</li>         </ul>        The scope of a bean can be specified in the configuration file using the scope attribute of the bean element.        <p>It is very important to choose the right scope for a bean, as it can affect the behavior and performance of the application.</p>                <h3>More resources</h3>         <ul class="mt-6 space-y-1">            <a href="https://www.tutorialspoint.com/spring/spring_bean_scopes.htm" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Spring - Bean Scopes</a><br>             <a href="https://www.baeldung.com/spring-bean-scopes" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                 <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Quick Guide to Spring Bean Scopes</a><br>              <a href="https://www.digitalocean.com/community/tutorials/spring-bean-scopes" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                 <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Spring Bean Scopes</a><br>              <a href="https://app.daily.dev/tags/spring?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                 <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">feed</span>Explore top posts about Spring Framework </a><br>          </ul>    </div>     `,
      "orange",
      [],
      true,
      "10",
    ),
    "Why Spring": new Data(
      "Why Spring",
      `<h2>Why Spring</h2>        <div class="flex-1">        <p>Spring Boot provides a number of features that make it easier to create a Spring-based application, including:</p>        <ul class="mt-6 space-y-1">            <li>Embedded Application Server</li>            <li>Automatic Configuration</li>            <li>Pre-configured Starters</li>            <li>Ease of Packaging and Distribution</li>            <li>Ease of monitoring through built-in health check endpoint and the ability to customize the management endpoint.</li>        </ul>        Additionally, it's come with a lot of best practices and conventions baked in, which reduces the amount of work and boiler plate code developers need to write.         <a href="https://spring.io/why-spring" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Why Spring?</a><br>        <p>Visit the following resources to learn more:</p>        <ul class="mt-6 space-y-1">            <li><a href="https://www.interviewbit.com/blog/spring-vs-spring-boot" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Spring vs Spring Boot: Know The Difference</a></li>            <li><a href="https://www.baeldung.com/spring-vs-spring-boot" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">A Comparison Between Spring and Spring Boot</a></li>            <li><a href="https://www.adservio.fr/post/advantages-of-spring-boot" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Advantages of Spring Boot</a></li>            <li><a href="https://app.daily.dev/tags/spring?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Explore top posts about Spring Framework</a></li>        </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    Introduction: new Data(
      "Introduction",
      `<h2>Introduction</h2>        <div class="flex-1">        <p>Spring Boot is a framework for building applications based on the Spring Framework, a widely-used, open-source framework for building Java-based enterprise applications. Spring Boot aims to make it easy to create stand-alone, production-grade Spring-based applications that you can "just run".</p>        <ul class="mt-6 space-y-1">            <li>For more information, visit the following links:</li>            <li><a href="https://www.tutorialspoint.com/spring_boot/spring_boot_introduction.htm" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Article on Spring Boot - Introduction</a></li>            <li><a href="https://medium.com/adessoturkey/introduction-to-spring-boot-458cb814ec14" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Introduction to Spring Boot</a></li>        </ul>         <p>For more information, visit the following links:</p>        <ul class="mt-6 space-y-1">        <li><a href="https://spring.io/projects/spring-boot" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Spring Boot - Official website</a></li>         </ul>        <p><a href="https://www.ibm.com/topics/java-spring-boot" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">What is Spring Boot?</a></p> </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    Architecture: new Data(
      "Architecture",
      `<h2>Architecture</h2>        <div class="flex-1">        <p>The Spring MVC (Model-View-Controller) is a web application framework that is part of the Spring Framework. It is designed to make it easy to build web applications using the MVC design pattern.</p>        <ul class="mt-6 space-y-1">                <li>For more resources, visit the following resources:</li>                </ul>        <ul class="mt-6 space-y-1">            <a href="https://www.javatpoint.com/spring-mvc-tutorial" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Spring MVC Tutorial            </a>        </ul>        <ul class="mt-6 space-y-1">            <a href="https://terasolunaorg.github.io/guideline/1.0.1.RELEASE/en/Overview/SpringMVCOverview.html" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Overview of Spring MVC Architecture            </a>        </ul>        <div class="mt-6 space-y-1">            <ul class="flex items-center justify-between">                <li><a href="https://app.daily.dev/tags/architecture?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Explore top posts about Architecture</a></li>            </ul>         </div>      `,
      "orange",
      [],
      true,
      "10",
    ),
    Terminology: new Data(
      "Terminology",
      `<h2>Terminology</h2>        <div class="flex-1">        <p>Spring Core is the foundation of the Spring Framework, which provides a comprehensive programming and configuration model for Java-based applications. Here are some key terms and concepts related to Spring Core:</p>        <ul class="mt-6 space-y-1">             <li><b>Beans:</b> In Spring, a "bean" is a Java object that is managed by the Spring container. Beans are typically defined using configuration metadata, which can be specified in XML, Java annotations, or Java code.</li>             <li><b>Inversion of Control (IoC):</b> One of the main principles of Spring is Inversion of Control (IoC), which means that the Spring container is responsible for managing the lifecycle of beans and injecting their dependencies. </li>             <li><b>Dependency Injection (DI):</b>  Spring uses Dependency Injection (DI) to manage the dependencies between beans. In DI, an object's dependencies are provided to it by the container, rather than the object creating or looking up its own dependencies.</li>             <li><b>Container:</b> The Spring container is the core part of the Spring Framework, which creates and manages beans and their dependencies. </li>            <li><b>ApplicationContext:</b> An ApplicationContext is an implementation of the Spring container. It is responsible for loading and managing the configuration metadata and creating the beans defined in that metadata.</li>             <li><b>Aspect-Oriented Programming (AOP):</b> Spring supports Aspect-Oriented Programming (AOP), which allows you to separate cross-cutting concerns, such as logging or security, from the business logic of your application. </li>             <li><b>Events:</b>  Spring provides an event model that allows beans to send and receive events. This is used to decouple the beans from each other, making the application more loosely coupled.  </li>             <li><b>ApplicationEvent and Listener:</b> Spring support publish subscribe model for event handling. ApplicationEvent defines event object, and the listener is a class that implements ApplicationListener interface, listening for the specific event and take the necessary action.</li>            <li><b>Data Access:</b>  Spring provides a consistent, high-level abstraction for data access using various frameworks like JDBC, Hibernate, JPA. </li>            <li><b>Transactions:</b> Spring provides a flexible, consistent and easy way to declaratively manage transactions with different underlying technologies such as JPA, JDBC, and Hibernate.</li>             <li><b>Task Execution and Scheduling:</b> Spring provides a TaskExecutor and TaskScheduler, providing a convenient way to run tasks concurrently, on a scheduled basis or asynchronously.</li>          </ul>        Visit the following links to learn more about Spring:        - [@official@Spring Boot - Official Website](https://spring.io/projects/spring-boot)        - [@official@Spring Boot - Starter Guide](https://spring.io/quickstart)         </div>      `,
      "orange",
      [],
      true,
      "10",
    ),
    "Spring Data JPA": new Data(
      "Spring Data JPA",
      `<h2>Spring Data JPA</h2>        <div class="flex-1">        <p>Spring Data JPA is a library that makes it easy to implement Java Persistence API (JPA) based repositories (a fancy word for "DAO") for Spring applications. It's an abstraction on top of JPA that allows you to use a simpler and more convenient API for performing CRUD (Create, Read, Update, Delete) operations on databases. Spring Data JPA also provides additional functionality such as pagination, dynamic query generation, and more.</p>        <ul class="mt-6 space-y-1">        <li>For more resources, visit the following links:</li>        </ul>        <ul class="mt-6 space-y-1">            <a href="https://spring.io/projects/spring-data-jpa" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Spring Data JPA</a><br>            <a href="https://www.baeldung.com/the-persistence-layer-with-spring-data-jpa" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Introduction to Spring Data JPA</a><br>            <a href="https://www.javatpoint.com/spring-and-jpa-integration" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Spring Data JPA Tutorial</a><br>            <a href="https://app.daily.dev/tags/spring?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">feed</span>Explore top posts about Spring Framework</a><br>        </ul>                </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Spring Data JDBC": new Data(
      "Spring Data JDBC",
      `<h2>Spring Data JDBC</h2>        <div class="flex-1">        <p>Spring Data JDBC is a part of the Spring Data project that provides support for using JDBC (Java Database Connectivity) to interact with relational databases. It is designed to provide a simple and consistent programming model for interacting with databases using JDBC, while still allowing for the full power of JDBC to be used if needed.  Spring Data JDBC provides a set of abstraction and utility classes that simplify the task of working with databases, such as a simple template class for executing SQL queries, a repository abstraction for implementing data access objects (DAOs), and support for pagination and sorting of query results. It works with both Java and Kotlin.</p>        <ul class="mt-6 space-y-1">        <li>It provides a simple and consistent programming model for interacting with databases using JDBC, while still allowing for the full power of JDBC to be used if needed.</li>        <li>Spring Data JDBC provides a set of abstraction and utility classes that simplify the task of working with databases, such as a simple template class for executing SQL queries, a repository abstraction for implementing data access objects (DAOs), and support for pagination and sorting of query results. </li></ul>        Visit the following links for more resources on spring data jdbc:<br>        <ul class="mt-6 space-y-1">        <a href="https://spring.io/projects/spring-data-jdbc" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Spring Data JDBC </a><br>        <a href="https://docs.spring.io/spring-data/jdbc/docs/current/reference/html/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">reference</span>Spring Data JDBC - Reference Documentation </a><br>        <a href="https://www.baeldung.com/spring-data-jdbc-intro" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Introduction to Spring Data JDBC </a><br>        <a href="https://app.daily.dev/tags/spring?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Explore</span>top posts about Spring Framework </a><br>        </ul>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Spring Data Mongodb": new Data(
      "Spring Data Mongodb",
      `<h2>Spring Data Mongodb</h2>        <div class="flex-1">        <p>Spring Data for MongoDB is part of the umbrella Spring Data project which aims to provide a familiar and consistent Spring-based programming model for new datastores while retaining store-specific features and capabilities. The Spring Data MongoDB project provides integration with the MongoDB document database. Key functional areas of Spring Data MongoDB are a POJO centric model for interacting with a MongoDB DBCollection and easily writing a Repository style data access layer.</p><ul class="mt-6 space-y-1">  <li>For more resources on spring data mongodb, visit the following links:</li>    <a href="https://spring.io/projects/spring-data-mongodb" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">    <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Spring Data MongoDB </a>  <br>  <a href="https://www.baeldung.com/spring-data-mongodb-tutorial" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">    <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Introduction to Spring Data MongoDB </a>   <br>  <a href="https://www.mongodb.com/compatibility/spring-boot" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">    <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Spring Boot Integration with MongoDB </a>   <br>   <a href="https://app.daily.dev/tags/mongodb?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">    <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">feed</span>Explore top posts about MongoDB </a> </ul>          </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "## @SpringBootTest Annotation": new Data(
      "## @SpringBootTest Annotation",
      `<h2>## @SpringBootTest Annotation</h2>        <div class="flex-1">        <p>The <code>@SpringBootTest</code> annotation is used to create a fully-configured instance of the Spring ApplicationContext for testing. It can be used to test the application's components, including controllers, services, and repositories, in a real application environment.</p>        <ul class="mt-6 space-y-1">        <li><strong>For more information, visit the following links:</strong></li>            <a href="https://reflectoring.io/spring-boot-test/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Testing</span>Spring Boot and @SpringBootTest </a><br>             <a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/SpringBootTest.html" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Annotation</span>Interface SpringBootTest </a><br>             <a href="https://www.baeldung.com/spring-boot-testing" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Testing</span>in Spring Boot </a><br>             <a href="https://app.daily.dev/tags/spring?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Explore</span>top posts about Spring Framework </a>         </ul>    </div>`,
      "orange",
      [],
      true,
      "10",
    ),
    MockBean: new Data(
      "MockBean",
      `<h2>MockBean</h2>        <div class="flex-1">        <p>MockBean is a Spring annotation that can be used to create a mock implementation of a bean in the Spring application context. When a test is annotated with MockBean, Spring creates a mock implementation of the specified bean and adds it to the application context. The mock bean can then be used to replace the real bean during testing.</p>        <ul class="mt-6 space-y-1">          <li>For more information, visit the following links:</li>          <a href="https://www.baeldung.com/java-spring-mockito-mock-mockbean" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            Mockito.mock() vs @Mock vs @MockBean</a><br>          <a href="https://howtodoinjava.com/spring-boot2/testing/spring-mockbean-annotation/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            Spring Boot @MockBean Example</a><br>          <a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/mock/mockito/MockBean.html" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            Annotation Interface MockBean</a>        </ul>         </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Mock MVC": new Data(
      "Mock MVC",
      `<h2>Mock MVC</h2>        <div class="flex-1">        <p>Spring's MockMvc is a class that allows you to test Spring MVC controllers without the need for an actual web server. It is part of the Spring Test module, which provides a set of testing utilities for Spring applications.</p>        For more information, visit the following link:<br>        <ul class="mt-6 space-y-1">        <a href="https://zetcode.com/spring/mockmvc/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Spring MockMVC tutorial        </a><br>        <a href="https://howtodoinjava.com/spring-boot2/testing/spring-boot-mockmvc-example/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Spring Boot MockMVC Example         </a><br>        <a href="https://baeldung.com/integration-testing-in-spring" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Integration Testing in Spring        </a>         </ul>        </div>    `,
      "orange",
      [],
      true,
      "10",
    ),
    "JPA Test": new Data(
      "JPA Test",
      `<h2>JPA Test</h2>        <div class="flex-1">        <p>Spring JPA (Java Persistence API) is a library that makes it easy to work with databases and other data stores in a Spring application. Spring JPA uses the Java Persistence API (JPA) to interact with databases and provides an abstraction layer to work with different data stores.</p>                <ul class="mt-6 space-y-1">            <li>Testing in Spring JPA involves testing the application's persistence layer, which includes the entities, repositories and data access objects (DAOs) that interact with the database. Testing these components separately from the rest of the application helps ensure that the persistence layer is working correctly and that any issues can be identified and addressed without affecting the rest of the application.</li>        </ul>         <p>There are several ways to test the persistence layer using Spring JPA. One way is to use in-memory databases, such as H2 or Derby, which can be used during testing to mimic the production database. This allows the tests to run quickly and eliminates the need to set up a separate test database.</p>        <ul class="mt-6 space-y-1">            <li>Another way is to use real databases and to use TestContainers to spin up a real instance of the database for testing purpose</li>        </ul>          <p>Spring Test module provides different annotations such as @DataJpaTest and @AutoConfigureTestDatabase that facilitates the testing of JPA specific functionality.</p>        <ul class="mt-6 space-y-1">             <li>Additionally, Spring provides the JPA Testing Utilities, which provides a set of utility classes and annotations to test JPA-based persistence layer easily, such as @DataJpaTest, @AutoConfigureTestDatabase, and TestEntityManager classes. These utilities can be used to create, read, update, and delete entities, perform JPA queries, and interact with the database during the test.</li>         </ul>        <p>Testing the persistence layer separately from the rest of the application allows to catch any issues early in the development process, making it easy to identify and fix bugs and improve the quality of the application.</p>        <p>Visit the following links for more information on JPA testing:</p>        <ul class="mt-6 space-y-1">            <a href="https://reflectoring.io/spring-boot-data-jpa-test/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                Testing JPA Queries with Spring Boot and @DataJpaTest</a><br>             <a href="https://www.bezkoder.com/spring-boot-unit-test-jpa-repo-datajpatest/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                DataJpaTest example for Spring Data Repository Unit Test</a><br>             <a href="https://www.baeldung.com/spring-boot-testing" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                Testing in Spring Boot</a><br>          </ul>     </div>    `,
      "orange",
      [],
      true,
      "10",
    ),
    Components: new Data(
      "Components",
      `<h2>Components</h2>        <div class="flex-1">        <p>The Spring MVC (Model-View-Controller) framework has several key components that work together to handle the requests and generate the appropriate responses in a web application. These components include:</p>         <ul class="mt-6 space-y-1"><li> DispatcherServlet: This is the front controller of the Spring MVC architecture. It is responsible for handling incoming requests, delegating responsibility to other components, and ultimately returning a response to the user.</li>        <li> Controller: Controllers handle the incoming requests, perform any necessary business logic on the Model, and then forward or redirect the request to the appropriate view.</li>         <li> Model: The Model represents the data and the business logic of the application. It can be implemented using JavaBeans, POJOs, or other Java objects.</li>        <li> View: The View is responsible for generating the HTML that is sent to the client's web browser. In Spring MVC, views are typically implemented using JSPs, but other view technologies such as Thymeleaf, FreeMarker, Velocity can also be used.</li>        <li> ViewResolver: This is responsible for resolving views based on the request and configured view resolvers. It maps logical view names to actual views, such as JSPs or Thymeleaf templates.</li>        <li>Form Controllers: These are special type of controllers that handle form submissions, and are responsible for data binding, validation and error handling.</li>        <li> HandlerMapping: This maps requests to appropriate controllers, responsible for handling the requests. </li>         <li> HandlerAdapter: This is used to handle the request and generate the response.</li></ul>        For more information, visit the following links:        <ul class="mt-6 space-y-1">        <li><a href="https://www.javatpoint.com/spring-vs-spring-boot-vs-spring-mvc" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Spring Boot vs Spring MVC: How do They Compare?</a></li>        <li><a href="https://www.javatpoint.com/spring-vs-spring-boot-vs-spring-mvc" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Spring MVC components</a></li>        </ul>         `,
      "orange",
      [],
      true,
      "10",
    ),
    Servlet: new Data(
      "Servlet",
      `<h2>Servlet</h2>        <div class="flex-1">        <p>A Spring servlet is a Java class that serves as the central point for handling requests and managing the lifecycle of the Spring IoC container. The Spring Framework provides a class called DispatcherServlet, which acts as the front controller in a Spring-based web application. When a user makes a request to a Spring web application, the DispatcherServlet is responsible for handling the request, delegating responsibility to other components, and ultimately returning a response to the user. The DispatcherServlet also manages the lifecycle of the Spring IoC container, including creating and initializing the container and making its beans available for use by other components in the application.</p>        <ul class="mt-6 space-y-1">        <li>For more information, visit the following links:</li>            <a href="https://www.baeldung.com/spring-boot-dispatcherservlet-web-xml" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>DispatcherServlet and web.xml in Spring Boot</a><br>             <a href="https://docs.spring.io/spring-framework/docs/3.0.0.M4/spring-framework-reference/html/ch15s02.html" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>The DispatcherServlet</a>         </ul>        </div>       `,
      "orange",
      [],
      true,
      "10",
    ),
    "JSP Files": new Data(
      "JSP Files",
      `<h2>JSP Files</h2>        <div class="flex-1">        <p>JSP (JavaServer Pages) is a technology for building dynamic web pages using Java.</p>        In a Spring MVC application that uses JSPs, the view component of the MVC pattern is implemented using JSP files. The JSP files contain the presentation logic for the application and are responsible for generating the HTML that is sent to the client's web browser. When a user makes a request to a Spring MVC application, the DispatcherServlet, which acts as the front controller, handles the request and delegates responsibility for generating the response to the appropriate JSP file.        Visit the following links for more resources:        <ul class="mt-6 space-y-1">        <li><a href="https://www.baeldung.com/spring-boot-jsp" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Spring Boot With JavaServer Pages (JSP)</a></li>        <li><a href="https://spring.io/blog/2012/10/30/spring-mvc-from-jsp-and-tiles-to-thymeleaf/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Spring MVC: from JSP and Tiles to Thymeleaf</a></li>        </ul>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    Transactions: new Data(
      "Transactions",
      `<h2>Transactions</h2>        <div class="flex-1">        <p>A transaction simply represents a unit of work. In such case, if one step fails, the whole transaction fails (which is termed as atomicity). A transaction can be described by ACID properties (Atomicity, Consistency, Isolation and Durability).</p>        <ul class="mt-6 space-y-1">          <li>In hibernate framework, we have Transaction interface that defines the unit of work. It maintains abstraction from the transaction implementation (JTA,JDBC).</li>           </ul>        Visit the following links to learn more:<br>        <ul class="mt-6 space-y-1">          <a href="https://www.javatpoint.com/hibernate-transaction-management-example" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Hibernate Transaction Management Example</a><br>          <a href="https://www.javaguides.net/2018/12/hibernate-transaction-management-tutorial.html" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Hibernate Transaction Management</a><br>          <a href="https://www.w3schools.blog/hibernate-transaction" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Hibernate Transaction</a><br>         </ul>          </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    Relationships: new Data(
      "Relationships",
      `<h2>Relationships</h2>        <div class="flex-1">        <p>Using hibernate, if we want to have relationship between two entities, there must exist a foreign key relationship between the tables, we call it as Referential integrity. The main advantage of having relationship between objects is, we can do operation on one object, and the same operation can transfer onto the other object in the database.</p>        <ul class="mt-6 space-y-1">          <li>Here are the four types of relationships we can have between objects in Hibernate:</li>          <li>- One-To-One</li>          <li>- Many-To-One</li>          <li>- Many-To-Many</li>          <li>- One-To-Many</li> </ul>        Visit the following links for more information:        <ul class="mt-6 space-y-1">          <a href="https://www.java4s.com/hibernate/hibernate-relationships-in-depth/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Hibernate Relationships In Depth</a><br>          <a href="https://stackabuse.com/a-guide-to-jpa-with-hibernate-relationship-mapping/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Guide to JPA with Hibernate - Relationship Mapping</a><br>          <a href="https://dzone.com/articles/hibernate-mapping" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Hibernate Mapping</a>        </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Entity lifecycle": new Data(
      "Entity lifecycle",
      `<h2>Entity lifecycle</h2>        <div class="flex-1">        <p>In Hibernate, we can either create a new object of an entity and store it into the database, or we can fetch the existing data of an entity from the database. These entity is connected with the lifecycle and each object of entity passes through the various stages of the lifecycle.</p>                <h3>Hibernate Lifecycle States</h3>        <ul class="mt-6 space-y-1">            <li>Transient State</li>            <li>Persistent State</li>            <li>Detached State</li>            <li>Removed State</li>        </ul>            For more resources, visit the following links:        <ul class="mt-6 space-y-1">            <li><a href="https://www.javatpoint.com/hibernate-lifecycle" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Article</span>Entity Lifecycle in Hibernate</a></li>            <li><a href="https://www.baeldung.com/hibernate-entity-lifecycle" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Article</span>Hibernate Entity Lifecycle & and its state</a></li>        </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    Authorization: new Data(
      "Authorization",
      `<h2>Authorization</h2>        <div class="flex-1">        <p>Spring Security supports a variety of authentication mechanisms, such as username and password authentication, OAuth2, and more. Once a user is authenticated, Spring Security can then be used to authorize that user's access to specific resources or functionality. There are several annotations that can be used to control access to specific methods or classes.</p>        <ul class="mt-6 space-y-1">        <li>There are several annotations that can be used to control access to specific methods or classes</li>        </ul>        Visit the following links for more information:        <ul class="mt-6 space-y-1">            <a href="https://docs.spring.io/spring-security/reference/servlet/authorization/index.html" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Spring Authorization</a>             <br>            <a href="https://docs.spring.io/spring-security/site/docs/5.2.11.RELEASE/reference/html/authorization.html" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Advanced authorization in Spring</a>             <br>             <a href="https://www.marcobehler.com/guides/spring-security" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Spring Security: Authentication and Authorization In-Depth</a>             <br>             <a href="https://app.daily.dev/tags/authorization?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">feed</span>Explore top posts about Authorization</a>         </ul>          </div>    `,
      "orange",
      [],
      true,
      "10",
    ),
    OAuth2: new Data(
      "OAuth2",
      `<h2>OAuth2</h2>        <div class="flex-1">        <p>Spring Security OAuth2 library provides support for both the authorization code grant type (for web apps) and the implicit grant type (for single-page apps). You can also use Spring Security to protect your resources, and to configure your application as an OAuth2 resource server. The OAuth2 authentication process can be complex and time-consuming, but the Spring Security OAuth2 library makes it easy to get started by providing a set of convenient configuration classes and annotations.</p>        <ul class="mt-6 space-y-1">            <li>Learn more about Oauth2 from the following resources:</li>            <a href="https://www.tutorialspoint.com/spring_boot/spring_boot_oauth2_with_jwt.htm" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Spring Boot - OAuth2 with JWT</a><br>            <a href="https://spring.io/guides/tutorials/spring-boot-oauth2/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Official Spring Boot and OAuth2</a><br>             <a href="https://www.tutorialspoint.com/spring_security/spring_security_with_oauth2.htm" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Spring Security</a><br>        </ul>         </div>          `,
      "orange",
      [],
      true,
      "10",
    ),
    "JWT Authentication": new Data(
      "JWT Authentication",
      `<h2>JWT Authentication</h2>        <div class="flex-1">        <p>Spring Security can be used to implement JWT Authentication and Authorization to your APIs. The library provides a JWT-based authentication filter that you can add to your API endpoints. The filter will check the JWT that is included in the request header, and if it is valid, it will set the authentication information in the security context. You can then use the security context to perform authorization checks on the API endpoints.</p>        <ul class="mt-6 space-y-1">        <li>For more resources, visit the following links:</li>        <li><a href="https://springframework.guru/jwt-authentication-in-spring-microservices-jwt-token/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">JWT Token Authentication in Spring</a></li>        <li><a href="https://www.toptal.com/spring/spring-security-tutorial" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Spring Security with JWT for REST API</a></li>        <li><a href="https://www.tutorialspoint.com/spring_security/spring_security_with_jwt.htm" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Spring Security - JWT</a></li>        <li><a href="https://app.daily.dev/tags/authentication?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Explore top posts about Authentication</a></li>        </ul>       </div>    `,
      "orange",
      [],
      true,
      "10",
    ),
    Authentication: new Data(
      "Authentication",
      `<h2>Authentication</h2>        <div class="flex-1">        <p>Spring Security is a framework for securing Java-based applications. One of its core features is authentication, which is the process of verifying that a user is who they claim to be. Spring Security provides a wide range of options for implementing authentication, including support for traditional username/password-based authentication as well as more modern alternatives such as OAuth and JSON Web Tokens (JWT).</p>        <ul class="mt-6 space-y-1">         <li><a href="https://docs.spring.io/spring-security/reference/features/authentication/index.html" target="_blank" rel="noopener">For more info, visit the following resources:</a></li>        </ul>        <div class="flex flex-col items-center space-y-4 mt-8">             <a href="https://www.baeldung.com/spring-security-basic-authentication" target="_blank" rel="noopener">                <p class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                    Spring Security Basic Authentication</p>             </a>          </div>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Spring Cloud OpenFeign": new Data(
      "Spring Cloud OpenFeign",
      `<h2>Spring Cloud OpenFeign</h2>        <div class="flex-1">        <p>Spring Cloud OpenFeign is a library for creating declarative REST clients in Spring applications. It allows developers to easily make HTTP requests to other microservices or remote services, without having to manually write the low-level code to handle the requests and responses. OpenFeign is built on top of the OpenFeign declarative HTTP client, which is a simple, lightweight library for creating HTTP clients in Java.</p>        <ul class="mt-6 space-y-1">        <li>For more resources, visit the following links:</li>        <li><a href="https://www.baeldung.com/spring-cloud-openfeign" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Introduction to Spring Cloud OpenFeign</a></li>        <li><a href="https://spring.io/projects/spring-cloud-openfeign" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Spring Cloud OpenFeign</a></li>        <li><a href="https://medium.com/javarevisited/simple-implementation-of-spring-cloud-openfeign-7f022630d01d" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Simple Implementation of Spring Cloud OpenFeign</a></li>        <li><a href="https://app.daily.dev/tags/cloud?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">feed</span>Explore top posts about Cloud</a></li>        </ul>        </div>`,
      "orange",
      [],
      true,
      "10",
    ),
    "Cloud Config": new Data(
      "Cloud Config",
      `<h2>Cloud Config</h2>        <div class="flex-1">        <p>Spring Cloud Config is a library for managing configuration properties for distributed applications. It allows developers to externalize configuration properties for an application, so that they can be easily changed without modifying the application's code. It also provides a centralized server for storing and managing configuration properties for multiple applications, making it easy to update and rollback configurations across different environments.</p>        <ul class="mt-6 space-y-1">        <li>By using Spring Cloud Config, developers can have a centralized and consistent approach for managing the configuration properties of their microservices or distributed applications, making it easy to modify the properties without having to change the code, also it helps in maintaining different environment configuration easily.</li>        </ul>        For more resources, visit the following links:        <ul class="mt-6 space-y-1">        <a href="https://spring.io/projects/spring-cloud-config" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Spring Cloud Config</a><br>        <a href="https://www.baeldung.com/spring-cloud-configuration" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Quick Intro to Spring Cloud Configuration</span></a>         <a href="https://www.tutorialspoint.com/spring_boot/spring_boot_cloud_configuration_server.htm" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Spring Boot - Cloud Configuration Server</span></a>         <a href="https://app.daily.dev/tags/cloud?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Explore top posts about Cloud</span></a>         </ul>        </div>   `,
      "orange",
      [],
      true,
      "10",
    ),
    "Circuit Breaker": new Data(
      "Circuit Breaker",
      `<h2>Circuit Breaker</h2>        <div class="flex-1">        <p>Spring Cloud Circuit Breaker is a library for managing the fault tolerance of microservices-based applications using the Circuit Breaker pattern. The Circuit Breaker pattern is a design pattern that helps to prevent cascading failures and improve the resilience of distributed systems. It does this by introducing a "circuit breaker" proxy in front of a service that can detect when the service is unresponsive or has failed, and stop routing traffic to it temporarily, in order to allow the service to recover.</p>        <ul class="mt-6 space-y-1">            <li>For more resources, visit the following links:</li>            <li><a href="https://spring.io/projects/spring-cloud-circuitbreaker" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">official</a></li>             <li><a href="https://www.baeldung.com/spring-cloud-circuit-breaker" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Quick Guide to Spring Cloud Circuit Breaker</a></li>             <li><a href="https://www.tutorialspoint.com/spring_cloud/spring_cloud_circuit_breaker_using_hystrix.htm" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Spring Cloud - Circuit Breaker using Hystrix</a></li>             <li><a href="https://app.daily.dev/tags/cloud?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Explore top posts about Cloud</a></li>         </ul>        </div>  `,
      "orange",
      [],
      true,
      "10",
    ),
    Eureka: new Data(
      "Eureka",
      `<h2>Eureka</h2>        <div class="flex-1">        <p>Spring Cloud Eureka is a library for service discovery in a microservices-based architecture. Service discovery is a technique that allows services to find and communicate with each other, without having to hardcode their addresses.</p>         <p>Eureka is a service registry that allows service instances to register themselves and to discover other services by name. It provides a simple, consistent way for services to find and communicate with each other, and it integrates with other Spring Cloud libraries such as Ribbon and Feign to provide load balancing and declarative REST clients.</p>        <ul class="mt-6 space-y-1">          <li>For more resources, visit the following links:</li>          <li><a href="https://www.baeldung.com/spring-cloud-netflix-eureka" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Introduction to Spring Cloud Netflix â€“ Eureka</a></li>           <li><a href="https://www.tutorialspoint.com/spring_boot/spring_boot_eureka_server.htm" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Spring Boot - Eureka Server</a></li>          <li><a href="https://www.youtube.com/watch?v=1uNo1NrqsX4" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Introducing Spring Cloud EUREKA</a></li>         </ul>          <div class="mt-6 space-y-1">                </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    Hystrix: new Data(
      "Hystrix",
      `<h2>Hystrix</h2>        <div class="flex-1">        <p>Spring Cloud Hystrix is a library for managing the fault tolerance of microservices-based applications using the Circuit Breaker pattern. It is a latency and fault tolerance library designed to isolate points of access to remote systems, services and 3rd party libraries, stop cascading failure and enable resilience in complex distributed systems where failure is inevitable. You can use it to easily instrument your code and monitor the health of your microservices using Spring Boot Actuator and Micrometer. It also provides a consistent programming model across different libraries, and allows developers to use annotations to enable circuit breaker functionality.</p>        <ul class="mt-6 space-y-1">            <li>Hystrix is a library that isolates points of access to remote systems, services, and 3rd party libraries. </li>            <li>It helps prevent cascading failures by stopping the spread of failure across the system.</li>             <li> It enables resilience in complex distributed systems where failure is inevitable.</li>        </ul>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">        <a href="https://www.tutorialspoint.com/spring_boot/spring_boot_hystrix.htm" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Spring Boot - Hystrix</a><br>        <a href="https://cloud.spring.io/spring-cloud-netflix/multi/multi__circuit_breaker_hystrix_clients.html" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Circuit Breaker: Hystrix Clients</a><br>        <a href="https://stackabuse.com/spring-cloud-hystrix/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Hystrix: Spring Cloud</a><br>        </ul>         </div>    `,
      "orange",
      [],
      true,
      "10",
    ),
    "Spring Cloud": new Data(
      "Spring Cloud",
      `<h2>Spring Cloud</h2>        <div class="flex-1">        <p>Spring Cloud is a collection of libraries and tools for building cloud-native applications using the Spring Framework. It provides a set of abstractions and implementations for common patterns and best practices used in cloud-based applications, such as service discovery, configuration management, and circuit breaker patterns, among others.</p>        <ul class="mt-6 space-y-1">             <li>Spring Cloud is built on top of Spring Boot and Spring Framework, and it integrates with other Spring projects, as well as with popular open-source libraries and cloud-native technologies, such as Netflix Eureka, Ribbon, Hystrix, and OpenFeign.</li>        </ul>           </div>  <div class="flex-1">          <h3>Common Libraries:</h3>        <ul class="mt-6 space-y-1">             <li>Spring Cloud Config, for managing configuration properties</li>            <li>Spring Cloud Netflix, for integration with Netflix OSS libraries</li>            <li>Spring Cloud Sleuth, for distributed tracing</li>            <li>Spring Cloud OpenFeign, for declarative REST clients</li>             <li>Spring Cloud Circuit Breaker, for implementing the Circuit Breaker pattern</li>            <li>Spring Cloud Eureka, for service discovery</li>        </ul>       </div> <div class="flex-1">         <h3>Benefits of Spring Cloud</h3>        <p>By using Spring Cloud, developers can take advantage of the features and capabilities provided by the cloud-native technologies, while still being able to use the familiar Spring programming model and development tools. It helps developers to use cloud-native patterns and best practices in a consistent and easy-to-use way, allowing them to focus on business logic, while the Spring Cloud libraries handle the infrastructure-related aspects of building cloud-native applications.</p>         </div>     <div class="flex-1">            <h3>Resources</h3>          <ul class="mt-6 space-y-1">               <li><a href="https://spring.io/projects/spring-cloud" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Official Project</a></li>                 <li><a href="https://www.javatpoint.com/spring-cloud" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Spring Cloud Tutorial</a></li>               <li><a href="https://www.baeldung.com/spring-cloud-bootstrapping" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Spring Cloud â€“ Bootstrapping</a></li>            <li><a href="https://app.daily.dev/tags/cloud?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Explore top posts about Cloud</a></li>           </ul>        </div>             `,
      "orange",
      [],
      true,
      "10",
    ),
    Sleuth: new Data(
      "Sleuth",
      `<h2>Sleuth</h2>        <div class="flex-1">        <p>Spring Cloud Sleuth is a library for distributed tracing in Spring-based applications. Distributed tracing is a technique that allows developers to track the flow of a request as it travels through a microservices-based application, in order to understand how the different components of the system are interacting and to identify and troubleshoot performance bottlenecks.</p>        <ul class="mt-6 space-y-1">        <li>Spring Cloud Sleuth provides a simple, consistent way to add trace information to the requests flowing through a Spring-based application. It automatically adds trace information, such as trace and span IDs, to requests and responses, so that developers can easily correlate requests as they travel through the different services and components of their application.</li>        </ul>        For more resources, visit the following links:    <ul class="mt-6 space-y-1">        <a href="https://spring.io/projects/spring-cloud-sleuth" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Spring Cloud Sleuth</a><br>         <a href="https://www.baeldung.com/spring-cloud-sleuth-single-application" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Spring Cloud Sleuth in a Monolith Application</a><br>         <a href="https://www.javainuse.com/spring/cloud-sleuth" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Spring Cloud Tutorial</a><br>    </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Spring Cloud Gateway": new Data(
      "Spring Cloud Gateway",
      `<h2>Spring Cloud Gateway</h2>        <div class="flex-1">        <p>Spring Cloud Gateway is a Spring Framework library for building API gateways. An API gateway is a service that acts as an intermediary between an application and a set of microservices. The API gateway is responsible for request routing, composition, and protocol translation, among other things. It can also perform tasks such as authentication, rate limiting, and caching.</p>        <ul class="mt-6 space-y-1">          <li>Spring Cloud Gateway is built on top of the Spring Framework and Spring Boot, and it integrates with other Spring projects such as Spring Cloud Netflix and Spring Security. It provides a simple, yet powerful way to route and manage requests to microservices, allowing developers to focus on business logic instead of writing boilerplate code to handle common API gateway tasks.</li>        </ul>        Visit the following links for more resources:        <ul class="mt-6 space-y-1">          <a href="https://tanzu.vmware.com/developer/guides/scg-what-is/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>What is Spring Cloud Gateway?</a><br>          <a href="https://spring.io/projects/spring-cloud-gateway" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Spring Cloud Gateway</a><br>          <a href="https://www.baeldung.com/spring-cloud-gateway" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Exploring the New Spring Cloud Gateway</a><br>          <a href="https://app.daily.dev/tags/cloud?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">feed</span>Explore top posts about Cloud</a><br>        </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
  };
}
