import { Injectable } from "@angular/core";
import { Data, DataService } from "../utils/data-utils";

@Injectable({
  providedIn: "root",
})
export class AngularDataService extends DataService {
  override data: { [key: string]: Data } = {
    angular: new Data("angular", "", "white", [], false, "0"),
    "Code Coverage": new Data(
      "Code Coverage",
      `<h2>Code Coverage</h2>        <div class="flex-1">        <p>The Angular CLI can run unit tests and create code coverage reports. Code coverage reports show you any parts of your code base that might not be properly tested by your unit tests.</p>        Visit the following resources to learn more:        - [@official@Angular Official Docs - code coverage](https://angular.dev/guide/testing/code-coverage)        - [@article@Measuring code coverage](https://testing-angular.com/measuring-code-coverage/)        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    Containers: new Data(
      "Containers",
      `<h2>Containers</h2>        <div class="flex-1">        <p>Some Angular Material UI components cannot take children, such as an input, so you need to use container elements to customize the UI component.</p>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">          <a href="https://angular.dev/best-practices/a11y#using-containers-for-native-elements" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">link</span>Using containers for native elements</a>         </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    Transformation: new Data(
      "Transformation",
      `<h2>Transformation</h2>        <div class="flex-1">        <p>In RxJS, "transformation" refers to the process of modifying or manipulating the data emitted by an Observable. There are a variety of methods available in RxJS that can be used to transform the data emitted by an Observable, including:</p>            <ul class="mt-6 space-y-1">            <li><strong>map</strong>: applies a function to each item emitted by the Observable and emits the resulting value</li>            <li><strong>mergeMap</strong>: applies a function to each item emitted by the Observable, and then merges the resulting Observables into a single Observable</li>            <li><strong>switchMap</strong>: applies a function to each item emitted by the Observable, and then switches to the latest resulting Observable</li>            <li><strong>concatMap</strong>: applies a function to each item emitted by the Observable, and then concatenates the resulting Observables into a single Observable</li>            <li><strong>exhaustMap</strong>: applies a function to each item emitted by the Observable, but ignores subsequent emissions until the current Observable completes</li>         </ul>               </div>       <p>For detailed information on these methods and their specific use cases, please refer to the official RxJS documentation:<br></p>     <ul class="mt-6 space-y-1">         <li><a href="https://rxjs.dev/api/operators/map" target="_blank"> <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Map</span></a> </li>        <li><a href="https://rxjs.dev/api/operators/mergeMap" target="_blank"> <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">MergeMap</span></a> </li>        <li><a href="https://rxjs.dev/api/operators/switchMap" target="_blank"> <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">SwitchMap</span></a> </li>        <li><a href="https://rxjs.dev/api/operators/concatMap" target="_blank"> <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">ConcatMap</span></a> </li>        <li><a href="https://rxjs.dev/api/operators/exhaustMap" target="_blank"> <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">ExhaustMap</span></a> </li>        <li><a href="https://www.youtube.com/watch?v=40pC5wHowWw" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black"><span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Practical Guide</span></a></li>       </ul>             `,
      "orange",
      [],
      true,
      "10",
    ),
    "Testing Services": new Data(
      "Testing Services",
      `<h2>Testing Services</h2>        <div class="flex-1">        <p>Understanding the basics is the key to a solid foundation. In this section, learn the basic terminologies, naming conventions, reserved words, conditions, functions, data structures, OOP, packages, etc.</p>        <ul class="mt-6 space-y-1"><li>To print output use —> System.out.println();</li><li>To take input from user —> Scanner or BufferedReader class can be used</li></ul>Visit the following resources to learn more:<br><ul class="mt-6 space-y-1">    <a href="https://www.youtube.com/watch?v=81piDKqPxjQ" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">    <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Testing Services</a><br>    <a href="https://www.youtube.com/watch?v=RRubcjpTkks" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">    <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Testing Services Tutorial</a></ul>         </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    Schematics: new Data(
      "Schematics",
      `<h2>Schematics</h2>        <div class="flex-1">        <p>A schematic is a template-based code generator that supports complex logic. It is a set of instructions for transforming a software project by generating or modifying code.</p>               Visit the following resources to learn more:        <ul class="mt-6 space-y-1">        <li><a href="https://angular.dev/tools/cli/schematics" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Generating code using schematics</a></li>        <li><a href="https://blog.angular.io/schematics-an-introduction-dc1dfbc2a2b2" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Blog</a></li>        </ul>      </div>    `,
      "orange",
      [],
      true,
      "10",
    ),
    "Basic Syntax": new Data(
      "Basic Syntax",
      `<h2>Basic Syntax</h2>        <div class="flex-1">        <p>Understanding the basics is the key to a solid foundation. In this section, learn the basic terminologies, naming conventions, reserved words, conditions, functions, data structures, OOP, packages, etc.</p>        <ul class="mt-6 space-y-1"><li>To print output use —> System.out.println();</li>        <li>To take input from user —> Scanner or BufferedReader class can be used</li></ul>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">        <a href="https://www.youtube.com/watch?v=81piDKqPxjQ" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Java- Basic Syntax</a><br>        <a href="https://www.youtube.com/watch?v=RRubcjpTkks" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Java Tutorial for Beginners</a>        </ul> `,
      "orange",
      [],
      true,
      "10",
    ),
    "Dependency Injection": new Data(
      "Dependency Injection",
      `<h2>Dependency Injection</h2>        <div class="flex-1">        <p>Dependency Injection is one of the fundamental concepts in Angular. DI is wired into the Angular framework and allows classes with Angular decorators, such as Components, Directives, Pipes, and Injectables, to configure dependencies that they need.</p>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/guide/di/dependency-injection" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Understanding Dependency Injection</a><br>        <a href="https://angular.dev/guide/di/di-in-action" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>DI in Action </a>        <a href="https://app.daily.dev/tags/dependency-injection?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">feed</span>Explore top posts about Dependency Injection</a>        </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "CLI Builders": new Data(
      "CLI Builders",
      `<h2>CLI Builders</h2>        <div class="flex-1">        <p>Learn how to build command line interfaces (CLIs) that simplify interaction with your application.</p>         </div>       `,
      "orange",
      [],
      true,
      "10",
    ),
    Signals: new Data(
      "Signals",
      `<h2>Signals</h2>        <div class="flex-1">        <p>Angular Signals is a system that granularly tracks how and where your state is used throughout an application, allowing the framework to optimize rendering updates.</p>        Visit the following resources to learn more:                <ul class="mt-6 space-y-1">        <a href="https://angular.dev/guide/signals" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Angular Official Docs - Signals        </a><br>        <a href="https://www.youtube.com/watch?v=6W6gycuhiN0&t=169s" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Signals Unleashed: The Full Guide        </a><br>        <a href="https://blog.angular-university.io/angular-signals/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Angular Signals Complete Guide        </a><br>        </ul>        </div>    `,
      "orange",
      [],
      true,
      "10",
    ),
    "RxJS vs Promises": new Data(
      "RxJS vs Promises",
      `<h2>RxJS vs Promises</h2>        <div class="flex-1">        <p>In a nutshell, the main differences between the Promise and the Observable are as follows:</p>        <ul class="mt-6 space-y-1">            <li>The Promise is eager, whereas the Observable is lazy,</li>            <li>The Promise is always asynchronous, while the Observable can be either asynchronous or synchronous,</li>            <li>The Promise can provide a single value, whereas the Observable is a stream of values (from 0 to multiple values),</li>        </ul>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">            <a href="https://javascript.plainenglish.io/why-rxjs-rxjs-vs-promises-b28962771d68" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Why RxJS? RxJS vs Promises</a><br>            <a href="https://app.daily.dev/tags/rxjs?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">feed</span>Explore top posts about RxJS</a>        </ul>       </div>       `,
      "orange",
      [],
      true,
      "10",
    ),
    Communication: new Data(
      "Communication",
      `<h2>Communication</h2>        <div class="flex-1">        <p>Understanding the basics is the key to a solid foundation. In this section, learn the basic terminologies, naming conventions, reserved words, conditions, functions, data structures, OOP, packages, etc.</p>        <ul class="mt-6 space-y-1"><li>To print output use —> System.out.println();</li>        <li>To take input from user —> Scanner or BufferedReader class can be used</li></ul>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">        <a href="https://www.youtube.com/watch?v=81piDKqPxjQ" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Java- Basic Syntax</a><br>        <a href="https://www.youtube.com/watch?v=RRubcjpTkks" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Java Tutorial for Beginners</a>        </ul>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    Routing: new Data(
      "Routing",
      `<h2>Routing</h2>        <div class="flex-1">        <p>Tracking and controlling focus in a UI is an important consideration in designing for accessibility. When using Angular routing, you should decide where page focus goes upon navigation.</p>        <ul class="mt-6 space-y-1">          <li>Visit the following resources to learn more:</li>           <a href="https://angular.dev/best-practices/a11y#routing" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Official Docs - a11y routing</a><br>          <a href="https://web.dev/learn/accessibility/focus/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Accessibility - Focus</a><br>          <a href="https://medium.com/@gurunadhpukkalla/router-events-in-angular-3112a3968660" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Router events in Angular</a>        </ul>         </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    NgRx: new Data(
      "NgRx",
      `<h2>NgRx</h2>        <div class="flex-1">        <p>NgRx is a framework for building reactive applications in Angular. NgRx simplifies managing application state by enforcing unidirectional data flow and providing tools like NgRx Store, NgRx Effects, NgRx Router Store, NgRx Signals, NgRx Entity, and NgRx Operators.</p>        <ul class="mt-6 space-y-1">            <li>Visit the following resources to learn more:</li>                <li><a href="https://ngrx.io/docs" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">What is NGRX?</a></li>                <li><a href="https://blog.angular-university.io/angular-ngrx-store-and-effects-crash-course/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular NgRx Store and Effects Crash Course</a></li>                <li><a href="https://www.youtube.com/watch?v=a3_GW3RBqn0" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular state management with NgRx</a></li>                <li><a href="https://www.youtube.com/watch?v=HqxY0JPlh54" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular NgRx Signal Store Crash Course (For NgRx Beginners)</a></li>                <li><a href="https://youtu.be/yYiO-kjmLAc?si=7J_JkOdbyocfb5m_" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">NgRx Best Practices</a></li>                <li><a href="https://www.youtube.com/watch?v=vcfZ0EQpYTA" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Course with NgRx - Building Angular Project From Scratch</a></li>        </ul>         </div>    `,
      "orange",
      [],
      true,
      "10",
    ),
    "Router links": new Data(
      "Router links",
      `<h2>Router links</h2>        <div class="flex-1">        <p>In Angular, routerLink when applied to an element in a template, makes that element a link that initiates navigation to a route. Navigation opens one or more routed components in one or more <router-outlet> locations on the page.</p>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/guide/routing/router-reference#router-links" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">          <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Router reference - Router links        </a><br>        <a href="https://angular.dev/api/router/RouterLink" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">          <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Router link - API        </a><br>        <a href="https://www.digitalocean.com/community/tutorials/angular-navigation-routerlink-navigate-navigatebyurl" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">          <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Angular Router: Navigation Using RouterLink, Navigate, or NavigateByUrl         </a>        </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Cross-site Request Forgery": new Data(
      "Cross-site Request Forgery",
      `<h2>Cross-site Request Forgery</h2>        <div class="flex-1">        <p>Cross-Site Request Forgery (CSRF) is a type of security vulnerability where an attacker tricks a website visitor into performing actions on the user's behalf without their knowledge or consent. It typically occurs when a malicious script is injected into a trusted website, enabling the attacker to trigger unintended commands on your website.</p>         </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "End-to-End Testing": new Data(
      "End-to-End Testing",
      `<h2>End-to-End Testing</h2>        <div class="flex-1">        <p>Understanding the basics is the key to a solid foundation. In this section, learn the basic terminologies, naming conventions, reserved words, conditions, functions, data structures, OOP, packages, etc.</p>    </div> `,
      "orange",
      [],
      true,
      "10",
    ),
    "Translation Files": new Data(
      "Translation Files",
      `<h2>Translation Files</h2>        <div class="flex-1">        <p>Understanding the basics is the key to a solid foundation. In this section, learn the basic terminologies, naming conventions, reserved words, conditions, functions, data structures, OOP, packages, etc.</p>        <ul class="mt-6 space-y-1"><li>To print output use —> System.out.println();</li>        <li>To take input from user —> Scanner or BufferedReader class can be used</li></ul>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">        <a href="#" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Java - Basic Syntax</a><br>        <a href="#" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Java Tutorial for Beginners</a>        </ul>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Template Driven Forms": new Data(
      "Template Driven Forms",
      `<h2>Template Driven Forms</h2>        <div class="flex-1">        <p>A Template driven form is the simplest form we can build in Angular. It is mainly used for creating simple form application.</p>        <ul class="mt-6 space-y-1"><li>It uses two-way data-binding (ngModel) to create and handle the form components.</li></ul>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/guide/forms/template-driven-forms" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">          <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Building a template-driven form</a><br>        <a href="https://codecraft.tv/courses/angular/forms/template-driven/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">          <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Template-Driven Forms</a>        </ul>        <div class="mt-6 flex space-x-4">          <video controls class="group font-medium text-gray-800 text-white" src="https://www.youtube.com/watch?v=whr14XxB8-M" alt="Template driven form"></video>          </div>        <div class="mt-6 flex space-x-4">          <video controls class="group font-medium text-gray-800 text-white" src="https://www.youtube.com/watch?v=cVd4ZCIXprs" alt="Template driven form Validations"></video>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Control Value Accessor": new Data(
      "Control Value Accessor",
      `<h2>Control Value Accessor</h2>        <div class="flex-1">        <p>Defines an interface that acts as a bridge between the Angular forms API and a native element in the DOM. Implement this interface to create a custom form control directive that integrates with Angular forms.</p>        <ul class="mt-6 space-y-1"><li>Visit the following resources to learn more: </li>        <li><a href="https://angular.dev/api/forms/ControlValueAccessor" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Official Docs</a></li>        <li><a href="https://hackernoon.com/mastering-angular-control-value-accessor-a-guide-for-angular-developer" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Mastering Angular Control Value Accessor</a></li>        <li><a href="https://blog.angular-university.io/angular-custom-form-controls/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Custom Form Controls</a></li></ul>        </div>    `,
      "orange",
      [],
      true,
      "10",
    ),
    "Attribute Directives": new Data(
      "Attribute Directives",
      `<h2>Attribute Directives</h2>        <div class="flex-1">        <p>The most used attribute directives are:  - ngClass - ngStyle - ngModelVisit the following resources to learn more:</p><ul class="mt-6 space-y-1">    <a href="https://angular.dev/guide/directives/attribute-directives" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Official Docs</span>    </a>     <a href="https://www.scaler.com/topics/angular/angular-attribute-directive/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Article</span>    </a> </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Control Flow": new Data(
      "Control Flow",
      `<h2>Control Flow</h2>        <div class="flex-1">        <p>Angular templates support control flow blocks that let you conditionally show, hide, and repeat elements.</p>        <ul class="mt-6 space-y-1">        <li>Visit the following resources to learn more:</li>            <a href="https://angular.dev/guide/templates/control-flow" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span> Built-in control flow</a>         </ul>        </div>    `,
      "orange",
      [],
      true,
      "10",
    ),
    "Link Identification": new Data(
      "Link Identification",
      `<h2>Link Identification</h2>        <div class="flex-1">        <p>CSS classes applied to active RouterLink elements, such as RouterLinkActive, provide a visual cue to identify the active link. Unfortunately, a visual cue doesn't help blind or visually impaired users. Applying the aria-current attribute to the element can help identify the active link.</p>        <ul class="mt-6 space-y-1">        <li>Visit the following resources to learn more:</li>        <a href="https://angular.dev/best-practices/a11y#active-links-identification" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">          <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Angular Official Docs - Accessibility - Active links identification</a><br>        <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">          <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>MDN Docs - ARIA Current</a>        </ul>            </div>          `,
      "orange",
      [],
      true,
      "10",
    ),
    "SSR in Angular": new Data(
      "SSR in Angular",
      `<h2>SSR in Angular</h2>        <div class="flex-1">        <p>A normal Angular application executes in the browser, rendering pages in the DOM in response to user actions. Angular Universal executes on the server, generating static application pages that later get bootstrapped on the client. This means that the application generally renders more quickly, giving users a chance to view the application layout before it becomes fully interactive.</p>        <ul class="mt-6 space-y-1">            <li>Visit the following resources to learn more:</li>             <a href="https://angular.dev/guide/ssr" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Server-side rendering</a> <br/>             <a href="https://web.dev/rendering-on-the-web/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Rendering on the Web </a>         </ul>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Structural Directives": new Data(
      "Structural Directives",
      `<h2>Structural Directives</h2>        <div class="flex-1">        <p>Structural directives are directives applied to an <ng-template> element that conditionally or repeatedly renders the content of that <ng-template>. If you just wrap elements in an <ng-template> without applying a structural directive, those elements will not be rendered.</p>        <ul class="mt-6 space-y-1">            <li>In Angular, there are three standard structural directives:</li>            <li> *ngIf – conditionally includes a template depending on the value of an expression returned by a Boolean. </li>            <li> *ngFor – makes it simple to iterate over an array. </li>            <li> *ngSwitch – renders each matching view.</li>         </ul>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">            <a href="https://angular.dev/guide/directives/structural-directives" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                Angular Official Docs - Structural Directives</a>            <br>             <a href="https://medium.com/@eugeniyoz/structural-directives-in-angular-61fe522f3427" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                Structural Directives in Angular</a>             <br>              <a href="https://www.freecodecamp.org/news/angular-structural-directive-patterns-what-they-are-and-how-to-use-them/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                Angular Structural Directive Patterns: What they are and how to use them</a>          </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Lazy Loading Modules": new Data(
      "Lazy Loading Modules",
      `<h2>Lazy Loading Modules</h2>        <div class="flex-1">        <p>By default, NgModules are eagerly loaded. This means that as soon as the application loads, so do all the NgModules, whether they are immediately necessary or not. For large applications with lots of routes, consider lazy loading —a design pattern that loads NgModules as needed. Lazy loading helps keep initial bundle sizes smaller, which in turn helps decrease load times.</p>        <ul class="mt-6 space-y-1">        <li>For large applications with lots of routes, consider lazy loading — a design pattern that loads NgModules as needed.</li>        </ul>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">            <a href="https://angular.dev/guide/ngmodules/lazy-loading" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Angular Official Docs - Lazy Loading            </a><br>            <a href="https://www.bairesdev.com/blog/angular-lazy-loading/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Angular Lazy Loading            </a><br>             <a href="https://www.youtube.com/watch?v=mjhi27YfV8Y" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Lazy Loading in Angular: Improving Performance and User Experience</a><br>        </ul>         </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Property binding": new Data(
      "Property binding",
      `<h2>Property binding</h2>        <div class="flex-1">        <p>Property binding helps you set values for properties of HTML elements or directives. To bind to an element's property, enclose it in square brackets [] which causes Angular to evaluate the right-hand side of the assignment as a dynamic expression.</p>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/guide/templates/property-binding" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular Official Website</span> </a>         </ul>            </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    Hydration: new Data(
      "Hydration",
      `<h2>Hydration</h2>        <div class="flex-1">        <p>Understanding the basics is the key to a solid foundation. In this section, learn the basic terminologies, naming conventions, reserved words, conditions, functions, data structures, OOP, packages, etc.</p>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Parent-Child Interaction": new Data(
      "Parent-Child Interaction",
      `<h2>Parent-Child Interaction</h2>        <div class="flex-1">        <p>In angular parent-child communication is commonly used to share data between two components.</p>        <ul class="mt-6 space-y-1"><li>Visit the following resources to learn more:</li>        <a href="https://jaspritk.medium.com/parent-child-communication-in-angular-888373e0b69e" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Medium - Parent-Child Communication</a></ul>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "HTTP Client": new Data(
      "HTTP Client",
      `<h2>HTTP Client</h2>        <div class="flex-1">        <p>Most front-end applications need to communicate with a server over the HTTP protocol, to download or upload data and access other back-end services. Angular provides a client HTTP API for Angular applications, the HttpClient service class in '@angular/common/http'.</p>        <ul class="mt-6 space-y-1">          <li>Visit the following resources to learn more:</li>            <a href="https://angular.dev/guide/http" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">              <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular Official Docs</span> - HTTP Client            </a>          <li><a href="https://blog.angular-university.io/angular-http/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">               <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular HTTP Client - Quickstart Guide</span></a> </li>          <li><a href="https://www.thisdot.co/blog/using-httpclient-in-modern-angular-applications" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Using HTTP Client in modern Angular applications</span></a> </li>         </ul>         </div>`,
      "orange",
      [],
      true,
      "10",
    ),
    "Observable Lifecycle": new Data(
      "Observable Lifecycle",
      `<h2>Observable Lifecycle</h2>        <div class="flex-1">        <p>An observable is a function that acts as a wrapper for a data stream. They support to pass messages inside your application. An observable is useless until an observer subscribes to it. An observer is an object which consumes the data emitted by the observable. An observer keeps receiving data values from the observable until the observable is completed, or the observer unsubscribes from the observable. Otherwise observers can receive data values from the observable continuously and asynchronously. So we can perform various operations such as updating the user interface, or passing the JSON response.</p>        <ul class="mt-6 space-y-1">            <li>An observable is useless until an observer subscribes to it</li>            <li>An observer is an object which consumes the data emitted by the observable.</li>            <li>An observer keeps receiving data values from the observable until the observable is completed, or the observer unsubscribes from the observable. Otherwise observers can receive data values from the observable continuously and asynchronously.</li>         </ul>        Visit the following resources to learn more:         <ul class="mt-6 space-y-1">        <a href="https://medium.com/analytics-vidhya/understanding-rxjs-observables-ad5b34d9607f" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Read More</span>Understanding Observable LifeCycle</a>        </ul>    </div>     `,
      "orange",
      [],
      true,
      "10",
    ),
    "Observer Pattern": new Data(
      "Observer Pattern",
      `<h2>Observer Pattern</h2>        <div class="flex-1">        <p>The observer pattern is a software design pattern in which an object, named the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods. </p>        <ul class="mt-6 space-y-1">            <li>In Angular, the Observer pattern simply means — Observable objects are registered, and other objects observe (in Angular using the subscribe method) them and take action when the observable object is acted on in some way.</li>        </ul>       Visit the following resources to learn more:       <ul class="mt-6 space-y-1">           <a href="https://medium.com/fuzzycloud/angular-and-observable-4bf890b2a282" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">               <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span> Angular and Observable</a>       </ul>        </div>`,
      "orange",
      [],
      true,
      "10",
    ),
    "Writing Interceptors": new Data(
      "Writing Interceptors",
      `<h2>Writing Interceptors</h2>        <div class="flex-1">        <p>Interceptors are middleware that allows common patterns around retrying, caching, logging, and authentication to be abstracted away from individual requests.</p>        Visit the following resources to learn more:         <ul class="mt-6 space-y-1">            <li><a href="https://angular.dev/guide/http/interceptors" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Official Docs - Interceptors</a></li>            <li><a href="https://www.scaler.com/topics/angular/angular-interceptor/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Interceptor</a></li>            <li><a href="https://www.youtube.com/watch?v=w1_AmHv2LmA" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Interceptors in Angular</a></li>        </ul>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    Provider: new Data(
      "Provider",
      `<h2>Provider</h2>        <div class="flex-1">        <p>Configure the injector of component with a token that maps to a provider of a dependency.</p>         Visit the following resources to learn more:<br>          <ul class="mt-6 space-y-1">            <a href="https://angular.dev/guide/di/dependency-injection-providers" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">              <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Configuring dependency providers</a><br>            <a href="https://angular.dev/api/core/Component#providers" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">              <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Component - API</a>           </ul>        </div>      `,
      "orange",
      [],
      true,
      "10",
    ),
    Styles: new Data(
      "Styles",
      `<h2>Styles</h2>        <div class="flex-1">        <p>This metadata allows developers to apply CSS styles directly to a component, enhancing its appearance and ensuring that styles are scoped to that particular component.</p>        Visit the following resources to learn more:          <ul class="mt-6 space-y-1">            <li><a href="https://angular.dev/guide/components/styling" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Styling components</a></li>             <li><a href="https://angular.dev/api/core/Component#styles" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Component - API </a></li>        </ul>         </div> `,
      "orange",
      [],
      true,
      "10",
    ),
    DevTools: new Data(
      "DevTools",
      `<h2>DevTools</h2>        <div class="flex-1">        <p>Angular DevTools is a browser extension that provides debugging and profiling capabilities for Angular applications.  You can view component trees and change detection cycles.</p>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">        <li><a href="https://angular.dev/tools/devtools" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Official Docs - devtools</a></li>        <li><a href="https://chromewebstore.google.com/detail/angular-devtools/ienfalfjdbdpebioblfackkekamfmbnh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Chrome Web Store</a></li>        <li><a href="https://addons.mozilla.org/en-US/firefox/addon/angular-devtools/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Firefox Add-ons</a></li>        <li><a href="https://www.youtube.com/watch?v=tAfe33fVW4w" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Did you try the LATEST Angular developer tools?</a></li>        </ul>         </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Module Architecture": new Data(
      "Module Architecture",
      `<h2>Module Architecture</h2>        <div class="flex-1">        <p>Angular’s module architecture organizes an application into cohesive units called NgModules, each defined by the @NgModule decorator. These modules group related components, directives, pipes, and services to encapsulate functionality and promote modular development. The root module (AppModule) is the entry point, bootstrapping the application and importing essential modules like BrowserModule. Feature modules encapsulate specific functionalities and can be eagerly or lazily loaded to improve performance and manageability. Shared modules group reusable components and services to prevent code duplication.         The @NgModule metadata includes properties like imports, declarations, exports, providers, and bootstrap, which help manage dependencies, declarations, visibility, service providers, and the root component. This modular approach enhances code organization, scalability, and maintainability in Angular applications.</p>        <ul class="mt-6 space-y-1">        <li>To learn more about Angular module architecture visit:</li><br>        </ul>        Visit following resources to learn more:        <ul class="mt-6 space-y-1">        <a href="https://dev.to/digitaldino/angular-architecture-39no" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Angular Architecture </a>        </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Debugging Tests": new Data(
      "Debugging Tests",
      `<h2>Debugging Tests</h2>        <div class="flex-1">        <p>Understanding the basics is the key to a solid foundation. In this section, learn the basic terminologies, naming conventions, reserved words, conditions, functions, data structures, OOP, packages, etc.</p>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    " # @if": new Data(
      " # @if",
      `<h2> # @if</h2>        <div class="flex-1">        <p> <strong>The @if block conditionally displays its content when its condition expression is truthy. Content is added and removed from the DOM based on the evaluation of conditional expressions in the @if and @else blocks.</strong></p>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/api/core/@if" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                Angular Official Docs - @if            </a><br>        <a href="https://egghead.io/lessons/angular-narrow-down-angular-s-signal-value-type-within-an-if-statement" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                Narrow Down Signal value type within an if statement            </a>         </ul>        </div>   `,
      "orange",
      [],
      true,
      "10",
    ),
    viewProvider: new Data(
      "viewProvider",
      `<h2>viewProvider</h2>        <div class="flex-1">        <p>Defines the set of injectable objects that are visible to its view DOM children.</p>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/guide/di/hierarchical-dependency-injection#using-the-viewproviders-array" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Using the viewProviders array</a><br>        <a href="https://angular.dev/api/core/Component#viewProviders" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Component - API</a>        </ul>        </div>`,
      "orange",
      [],
      true,
      "10",
    ),
    "Transitions & Triggers": new Data(
      "Transitions & Triggers",
      `<h2>Transitions & Triggers</h2>        <div class="flex-1">        <p>In Angular, transition states can be defined explicitly through the state() function, or using the predefined * wildcard and void states. An asterisk * or wildcard matches any animation state. This is useful for defining transitions that apply regardless of the HTML element's start or end state. Use the void state to configure transitions for an element that is entering or leaving a page.</p>        <ul class="mt-6 space-y-1">            <li>Use the 'state' function for a specific transition</li>            <li>Use the wildcard "*" to match any state</li>            <li>Use "void" for transitions involving entering or leaving pages.</li>        </ul>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">            <a href="https://angular.dev/guide/animations/transition-and-triggers" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Official Docs - Transition and Triggers</a><br>            <a href="https://www.youtube.com/watch?v=CGBcIz1tYec" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Animations: Learn the basics</a><br>            <a href="https://www.youtube.com/watch?v=3_B4OV5M_Ag" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">How to use trigger function in Angular Animations</a>        </ul>        </div>     `,
      "orange",
      [],
      true,
      "10",
    ),
    "Slow Computations": new Data(
      "Slow Computations",
      `<h2>Slow Computations</h2>        <div class="flex-1">        <p>This section will explore the challenges and approaches for handling slow computations. We'll delve into factors that can contribute to computational bottlenecks, understand strategies to optimize your code, and discover new techniques for achieving better performance.</p>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    Performance: new Data(
      "Performance",
      `<h2>Performance</h2>        <div class="flex-1">        <p>Angular’s performance is enhanced through key strategies such as Deferable Views for improved initial load times, Image Optimization techniques to reduce loading overhead, and mitigation of Zone Pollution to streamline change detection. Additionally, addressing Slow Computations enhances runtime efficiency, while Hydration techniques support faster, more interactive server-side rendered applications.</p>        <ul class="mt-6 space-y-1">            <li>Deferable Views for improved initial load times</li>            <li>Image Optimization techniques to reduce loading overhead</li>            <li>Mitigation of Zone Pollution to streamline change detection</li>            <li>Addressing Slow Computations enhances runtime efficiency</li>            <li>Hydration techniques support faster, more interactive server-side rendered applications</li>        </ul>        Learn more from the following resources:        - <a href="https://www.youtube.com/watch?v=tMxrY7IL-Ac" target="_blank">          <span class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">video</span>From Good to Great: Optimizing Angular Performance</a>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Complex Sequences": new Data(
      "Complex Sequences",
      `<h2>Complex Sequences</h2>        <div class="flex-1">        <p>Angular lets you animate coordinated sequences, such as an entire grid or list of elements as they enter and leave a page. You can choose to run multiple animations in parallel, or run discrete animations sequentially, one following another.</p>        <ul class="mt-6 space-y-1">        <li>The functions that control complex animation sequences are:</li>        <li> query(): Finds one or more inner HTML elements.</li>        <li> stagger(): Applies a cascading delay to animations for multiple elements.</li>        <li> group(): Runs multiple animation steps in parallel.</li>        <li> sequence(): Runs animation steps one after another.</li>        </ul>         Visit the following resources to learn more:        <br>        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/guide/animations/complex-sequences" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular Official Docs - Complex Sequences</span> </a><br>        <a href="https://www.youtube.com/watch?v=RPdR7HzNQIw" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular Animations: Animating multiple items in parallel</span> </a>         </ul>            </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Common Pipes": new Data(
      "Common Pipes",
      `<h2>Common Pipes</h2>        <div class="flex-1">        <p>Angular provides built-in pipes for typical data transformations, including transformations for internationalization (i18n), which use locale information to format data. The following are commonly used built-in pipes for data formatting:</p>        <ul class="mt-6 space-y-1">          <li><b>DatePipe</b>: Formats a date value according to locale rules.</li>          <li><b>UpperCasePipe</b>: Transforms text to all upper case.</li>          <li><b>LowerCasePipe</b>: Transforms text to all lower case.</li>          <li><b>CurrencyPipe</b>: Transforms a number to a currency string, formatted according to locale rules.</li>           <li><b>DecimalPipe</b>: Transforms a number into a string with a decimal point, formatted according to locale rules.</li>           <li><b>PercentPipe</b>: Transforms a number to a percentage string, formatted according to locale rules.</li>        </ul>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/guide/pipes" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">          <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular Official Docs</span> - Pipes</a><br>        <a href="https://medium.com/@aqeelabbas3972/pipes-in-angular-6a871589299d" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">          <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Pipes in Angular</span></a>         </ul></div>`,
      "orange",
      [],
      true,
      "10",
    ),
    Imports: new Data(
      "Imports",
      `<h2>Imports</h2>        <div class="flex-1">        <p>The imports property specifies the         standalone component's template dependencies — those directives, components, and        pipes that can be used within its template.</p>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/guide/components/importing" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Importing and using components</span> </a><br>        <a href="https://angular.dev/api/core/Component#imports" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Component - API</span> </a>         </ul>        </div> `,
      "orange",
      [],
      true,
      "10",
    ),
    "Angular Modules": new Data(
      "Angular Modules",
      `<h2>Angular Modules</h2>        <div class="flex-1">        <p>Modules in Angular act like a container where we can group the components, directives, pipes, and services, related to the application.</p>        <ul class="mt-6 space-y-1">            <li><a href="https://angular.dev/guide/components/importing" target="_blank">Importing and using components</a></li>             <li><a href="https://angular.dev/guide/ngmodules" target="_blank">Introduction to Modules</a></li>           </ul>    Visit the following resources to learn more:    - <a href="https://app.daily.dev/tags/angular?ref=roadmapsh" target="_blank">Explore top posts about Angular</a>         </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Introduction to Angular": new Data(
      "Introduction to Angular",
      `<h2>Introduction to Angular</h2>        <div class="flex-1">        <p>Angular is a popular open-source front-end web application framework developed by Google. It is written in TypeScript and allows developers to build dynamic, single-page web applications with ease.</p>        <ul class="mt-6 space-y-1">            <li>One of the key features of Angular is its use of components, which are reusable building blocks for creating web applications. Components encapsulate the HTML, CSS, and TypeScript code needed to define a specific part of a web page, making it easier to manage and maintain complex applications.</li>             <li>Angular also includes a powerful dependency injection system, which helps manage the dependencies between different parts of an application and promotes code reusability. Additionally, Angular provides tools for routing, form handling, and state management, making it a versatile framework for building a wide range of web applications.</li>        </ul>        <p>Learn more from the following resources:</p>        <ul class="mt-6 space-y-1">            <a href="https://angularjs.org/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular website</span>            </a>        </ul>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Change Detection": new Data(
      "Change Detection",
      `<h2>Change Detection</h2>        <div class="flex-1">        <p>Change detection is the process through which Angular checks to see whether your application state has changed, and if any DOM needs to be updated. At a high level, Angular walks your components from top to bottom, looking for changes. Angular runs its change detection mechanism periodically so that changes to the data model are reflected in an application’s view. Change detection can be triggered either manually or through an asynchronous event </p>        <ul class="mt-6 space-y-1">          <li><a href="https://angular.dev/best-practices/runtime-performance" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Runtime performance optimization</a></li>                <li><a href="https://angular.dev/guide/components/advanced-configuration#changedetectionstrategy" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Change detection strategy</a></li>                  <li><a href="https://www.youtube.com/watch?v=f8sA-i6gkGQ" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Change detection</a></li>        </ul>        </div>       `,
      "orange",
      [],
      true,
      "10",
    ),
    "Local Setup": new Data(
      "Local Setup",
      `<h2>Local Setup</h2>        <div class="flex-1">        <p>This section will provide detailed instructions on setting up your development environment locally.</p>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Trusting Safe Values": new Data(
      "Trusting Safe Values",
      `<h2>Trusting Safe Values</h2>        <div class="flex-1">        <p>Understanding the basics is the key to a solid foundation. In this section, learn the basic terminologies, naming conventions, reserved words, conditions, functions, data structures, OOP, packages, etc.</p>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Route Transitions": new Data(
      "Route Transitions",
      `<h2>Route Transitions</h2>        <div class="flex-1">        <p>When a user navigates from one route to another, the Angular router maps the URL path to a relevant component and displays its view. Animating this route transition can greatly enhance the user experience.</p>        <ul class="mt-6 space-y-1">            <li>Visit the following resources to learn more:</li>            <li><a href="https://angular.dev/guide/animations/route-animations" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Official Docs - Route transition animations</a></li>            <li><a href="https://dev.to/this-is-angular/add-router-animation-trnasitions-for-navigation-in-angular-17-2m5a" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Add router animation trnasitions for navigation in Angular 17</a></li>            <li><a href="https://www.youtube.com/watch?v=7d8UDEKT1pU" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Animations: Router transitions</a></li>        </ul>        </div>     `,
      "orange",
      [],
      true,
      "10",
    ),
    "Template Syntax": new Data(
      "Template Syntax",
      `<h2>Template Syntax</h2>        <div class="flex-1">        <p>Understanding the basics is the key to a solid foundation. In this section, learn the basic terminologies, naming conventions, reserved words, conditions, functions, data structures, OOP, packages, etc.</p>        <ul class="mt-6 space-y-1"><li>To print output use —> System.out.println();</li>        <li>To take input from user —> Scanner or BufferedReader class can be used</li></ul>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">        <a href="https://www.youtube.com/watch?v=81piDKqPxjQ" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Template Syntax</a><br>        <a href="https://www.youtube.com/watch?v=RRubcjpTkks" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Java Tutorial for Beginners</a>        </ul>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Setting up a New Project": new Data(
      "Setting up a New Project",
      `<h2>Setting up a New Project</h2>        <div class="flex-1">        <p>Visit the following resources to learn more:</p>         <ul class="mt-6 space-y-1">            <li><a href="https://angular.dev/installation" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Installation</a></li>            <li><a href="https://angular.dev/tools/cli/setup-local" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Setting up the local environment and workspace</a></li>            <li><a href="https://angular.dev/tutorials/first-app" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Build your first Angular app</a></li>         </ul>            </div>  `,
      "orange",
      [],
      true,
      "10",
    ),
    Security: new Data(
      "Security",
      `<h2>Security</h2>        <div class="flex-1">        <p>Security is crucial in software development, especially for data storage and user privacy. This section will cover the following:</p>         </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Reactive Forms": new Data(
      "Reactive Forms",
      `<h2>Reactive Forms</h2>        <div class="flex-1">        <p>Reactive forms in Angular are used to handle inputs coming from the user. We can define controls by using classes such as FormGroup and FormControl.</p>        <ul class="mt-6 space-y-1"><li>Visit the following resources to learn more:</li>        <li><a href="https://angular.dev/guide/forms/reactive-forms" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Official Angular Documentation</a></li>        <li><a href="https://www.javatpoint.com/angular-reactive-forms" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Reactive Forms Article</a></li>         <li><a href="https://www.digitalocean.com/community/tutorials/angular-reactive-forms-introduction" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Reactive Forms Introduction</a></li>        <li><a href="https://www.youtube.com/watch?v=8k4ctDmVn7w" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Reactive Form in Angular</a></li>        <li><a href="https://app.daily.dev/tags/general-programming?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Explore Top Posts about General Programming</a></li>        </ul>        </div>     `,
      "orange",
      [],
      true,
      "10",
    ),
    "Dynamic Forms": new Data(
      "Dynamic Forms",
      `<h2>Dynamic Forms</h2>        <div class="flex-1">        <p>Dynamic forms in Angular are a flexible way to create forms where the structure (such as form fields and validation rules) is generated at runtime, rather than being hardcoded. By using Angular's FormBuilder and FormGroup, you can dynamically add, remove, or modify form controls based on user input, data fetched from a server, or other logic. This approach allows for creating complex forms that can adapt to different user scenarios, reducing the need for multiple form templates and making the codebase more maintainable and scalable.</p>        <ul class="mt-6 space-y-1">            <li>Learn more from the following resources:</li>            <li><a href="https://angular.dev/guide/forms/dynamic-forms" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Dynamic Forms Documentation</a></li>             <li><a href="https://www.youtube.com/watch?v=ByHw_RMjkKM" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Create a Dynamic Reactive Angular Form with JSON</a></li>        </ul>         </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "RxJS Interop": new Data(
      "RxJS Interop",
      `<h2>RxJS Interop</h2>        <div class="flex-1">        <p>Angular's @angular/core/rxjs-interop package provides useful utilities to integrate Angular Signals with RxJS Observables. Use a toSignal function to create a signal that tracks the value of an Observable. Use the toObservable utility to create an Observable which tracks the value of a signal.</p>        <ul class="mt-6 space-y-1">            <li>Use a <code>toSignal</code> function to create a Signal that tracks the value of an Observable.</li>            <li>Use the <code>toObservable</code> utility to create an Observable which tracks the value of a signal. </li>        </ul>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/guide/signals/rxjs-interop" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Official Docs - RxJS Interop</a><br>        <a href="https://angular.love/en/angular-signals-rxjs-interop-from-a-practical-example" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular signals RxJS interop from a practical example</a><br>        <a href="https://www.youtube.com/watch?v=cam39UyVbpI" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Signals RxJs Interoperability: toObservable() (Guess the Behavior)</a>        </ul>         </div>    `,
      "orange",
      [],
      true,
      "10",
    ),
    "Zoneless Applications": new Data(
      "Zoneless Applications",
      `<h2>Zoneless Applications</h2>        <div class="flex-1">        <p>Angular 18 introduced an experimental feature called zoneless change detection. This technology removes the need for Zone.js, a library that was previously used for change detection in Angular from the beginning. By eliminating Zone.js, Angular applications can have faster initial renders, smaller bundle sizes, and simpler debugging.</p>        <ul class="mt-6 space-y-1">             <li>Angular 18 introduced an experimental feature called zoneless change detection.</li>            <li>This technology removes the need for Zone.js, a library that was previously used for change detection in Angular from the beginning.</li>        </ul>        Visit the following resources to learn more:<br>         <ul class="mt-6 space-y-1">            <a href="https://angular.dev/guide/experimental/zoneless" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span> Angular Official Docs - Zoneless</a><br>            <a href="https://blog.logrocket.com/zoneless-change-detection-angular-18/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Zoneless Change Detection Angular 18</a><br>            <a href="https://angularindepth.com/posts/1513/from-zone-js-to-zoneless-angular-and-back-how-it-all-works" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>From Zone JS to Zoneless Angular and back: How it all works</a><br>            <a href="https://justangular.com/blog/a-new-era-for-angular-zoneless-change-detection" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>A New Era for Angular: Zoneless Change Detection</a><br>            <a href="https://www.youtube.com/watch?v=MZ6s5EL7hKk" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Zoneless Angular Applications in V18</a><br>            <a href="https://www.youtube.com/watch?v=vHNeAqgNM4o" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>I tested Angular 18 Zoneless mode and this is what I found out!</a><br>        </ul>         </div>   `,
      "orange",
      [],
      true,
      "10",
    ),
    switch: new Data(
      "switch",
      `<h2>switch</h2>        <div class="flex-1">        <p>The switch statement is a way to implement multiple <b>"if-else"</b> statements in one line.</p>   <br>    </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Angular Components": new Data(
      "Angular Components",
      `<h2>Angular Components</h2>        <div class="flex-1">        <p>Components are the main building block for Angular applications. Each component consists of:</p>        <ul class="mt-6 space-y-1">            <li>An HTML template that declares what renders on the page</li>             <li>A TypeScript class that defines the behavior</li>             <li>A CSS selector that defines how the component is used in a template</li>             <li>Optionally, CSS styles applied to the template </li>        </ul>                Visit the following resources to learn more:        <ul class="mt-6 space-y-1">            <a href="https://angular.dev/guide/components" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Anatomy of a component</span>             </a><br>            <a href="https://angular.dev/essentials/components" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Composing with Components in Angular</span>             </a><br>            <a href="https://www.youtube.com/watch?v=x5PZwb4XurU" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Standalone Components in Angular</span>             </a><br>            <a href="https://app.daily.dev/tags/angular?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Explore top posts about Angular</span>             </a><br>         </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Binding Data Props Attrs Events": new Data(
      "Binding Data Props Attrs Events",
      `<h2>Binding Data Props Attrs Events</h2>        <div class="flex-1">        <p>In an Angular template, a binding creates a live connection between the view and the model and keeps them both in sync.</p>        <ul class="mt-6 space-y-1">            <li>**Property**: helps you set values for properties of HTML elements or directives.</li>            <li> **Attributes**: helps you set values for attributes of HTML elements directly.</li>            <li> **Event**: lets you listen for and respond to user actions such as keystrokes, mouse movements, clicks, and touches. </li>             <li>**Data**: It's a combination of property and event binding and helps you share data between components.</li>        </ul>        Visit the following resources to learn more:        <a href="https://angular.dev/guide/templates/binding" target="_blank">            <span class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Official Website</span> </a>         </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Using Libraries": new Data(
      "Using Libraries",
      `<h2>Using Libraries</h2>        <div class="flex-1">        <p>Understanding the basics is the key to a solid foundation. In this section, learn how to utilize libraries for more efficient coding.</p>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "##  @else if": new Data(
      "##  @else if",
      `<h2>##  @else if</h2>        <div class="flex-1">        <p>This is a placeholder for content related to the 'else if' statement.</p>         </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Two-Way Binding": new Data(
      "Two-Way Binding",
      `<h2>Two-Way Binding</h2>        <div class="flex-1">        <p>Two-way binding gives components in your application a way to share data. Use two-way binding to listen for events and update values simultaneously between parent and child components. Angular's two-way binding syntax is a combination of square brackets and parentheses, [()], commonly known as banana in a box. </p>        <ul class="mt-6 space-y-1">         <li>Use two-way binding to listen for events and update values simultaneously between parent and child components</li>        </ul>          Visit the following resources to learn more:        <ul class="mt-6 space-y-1">          <a href="https://angular.dev/guide/templates/two-way-binding" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular Official Docs - Two-way binding</span> </a><br>          <a href="https://www.angularminds.com/blog/how-to-implement-two-way-data-binding-in-angular" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">How to implement two-way data binding in Angular</span> </a>        </ul>         </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    Zones: new Data(
      "Zones",
      `<h2>Zones</h2>        <div class="flex-1">        <p>Zone.js is a signaling mechanism that Angular uses to detect when an application state might have changed. It captures asynchronous operations like setTimeout, network requests, and event listeners. Angular schedules change detection based on signals from Zone.js.</p>        <ul class="mt-6 space-y-1">        <li>For more information on resolving zone pollution, visit <a href="https://angular.dev/best-practices/zone-pollution" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">the official documentation</a></li>        <li>To learn about Angular without ZoneJS (Zoneless), visit <a href="https://angular.dev/guide/experimental/zoneless" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">the official documentation</a></li>        </ul>        <p>To learn more about the NgZone API, visit <a href="https://angular.dev/api/core/NgZone" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">the official documentation</a></p>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Angular Architecture": new Data(
      "Angular Architecture",
      `<h2>Angular Architecture</h2>        <div class="flex-1">        <p>Visit the following resources to learn more:</p>        <ul class="mt-6 space-y-1">             <li><a href="https://angular.dev/style-guide" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular coding style guide</a></li>        </ul>       </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    ViewChild: new Data(
      "ViewChild",
      `<h2>ViewChild</h2>        <div class="flex-1">        <p>View queries retrieve results from the elements in the component's view — the elements defined in the component's own template.</p>        <ul class="mt-6 space-y-1">        <li>Visit the following resources to learn more:</li>        <li><a href="https://angular.dev/guide/components/queries#view-queries" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>View queries</a></li>        <li><a href="https://angular.dev/guide/signals/queries#viewchild" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">viewChild</span> - signal</a></li>        <li><a href="https://angular.dev/guide/signals/queries#viewchildren" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">viewChildren</span> - signal</a></li>        <li><a href="https://angular.dev/api/core/viewChild" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>viewChild - API</a></li>        </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Deferrable Views": new Data(
      "Deferrable Views",
      `<h2>Deferrable Views</h2>        <div class="flex-1">        <p>Deferrable views can be used in component template to defer the loading of select dependencies within that template. Those dependencies include components, directives, and pipes, and any associated CSS. To use this feature, you can declaratively wrap a section of your template in a @defer block which specifies the loading conditions.</p>        <ul class="mt-6 space-y-1">        <li>Deferrable views allow components to load their dependencies only when needed.</li>         <li>This can significantly improve performance by reducing initial page loads. </li>         </ul>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/guide/defer" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular Official Docs</span> Deferrable Views        </a>        <a href="https://medium.com/@kashif_khan/exploring-angular-17-unlocking-performance-with-deferrable-views-580b1977f430" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Unlocking performance with Deferrable Views</span>        </a>         <a href="https://www.youtube.com/watch?v=h2rEGoqwr6o" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular 17 Defer Block</span>Lazy Loading in Angular 17 |Angular 17 Deferrable Views |Angular 17 Tutorial        </a>        <a href="https://angular.love/en/learn-how-to-unit-test-the-deferrable-views" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Learn how to unit test deferrable views</span>        </a>        </ul>       </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Multiple Locales": new Data(
      "Multiple Locales",
      `<h2>Multiple Locales</h2>        <div class="flex-1">        <p>Understanding how to work with multiple locales helps build a versatile application that can be used across different parts of the world. This section explores the key concepts and features relevant for handling various languages, currencies, and dates.</p>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    Deployment: new Data(
      "Deployment",
      `<h2>Deployment</h2>        <div class="flex-1">        <p>Deployment is the process of making a software application or system available to end users.</p>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    Filtering: new Data(
      "Filtering",
      `<h2>Filtering</h2>        <div class="flex-1">        <p>RxJS provides a variety of filtering operators that you can use to filter and transform the data in a stream. You can use these operators in combination with other RxJS operators to create powerful and efficient data processing pipelines.</p>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">        <a href="https://rxjs.dev/api/operators" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Understanding RxJS Operators</a>        </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Reference vars": new Data(
      "Reference vars",
      `<h2>Reference vars</h2>        <div class="flex-1">        <p>Template reference variables help you use data from one part of a template in another part of a template. A template variable can refer to a DOM element within a template, component or directive. In the template, use the hash symbol, #, to declare a template reference variable.</p>        <ul class="mt-6 space-y-1">        <li>Visit the following resources to learn more:</li>        <li><a href="https://angular.dev/guide/templates/reference-variables" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Official Website</a></li>        </ul>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    Directive: new Data(
      "Directive",
      `<h2>Directive</h2>        <div class="flex-1">        <p>Directives are the functions that will execute whenever the Angular compiler finds them. Angular Directives enhance the capability of HTML elements by attaching custom behaviors to the DOM.</p>        From the core concept, Angular directives are categorized into three categories: Attribute Directives, Structural Directives, and Component Directives.</p>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">        <a href="https://www.youtube.com/watch?v=AoN56g6UAsE" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Create a custom directive video for Beginners </a>        </ul>        </div>    `,
      "orange",
      [],
      true,
      "10",
    ),
    Encapsulation: new Data(
      "Encapsulation",
      `<h2>Encapsulation</h2>        <div class="flex-1">        <p>An encapsulation policy for the component's styling. Possible values:</p>        <ul class="mt-6 space-y-1">            <li> ViewEncapsulation.Emulated: Apply modified component styles in order to emulate a native Shadow DOM CSS               encapsulation behavior.</li>            <li> ViewEncapsulation.None: Apply component styles globally without any sort of encapsulation.</li>            <li> ViewEncapsulation.ShadowDom: Use the browser's native Shadow DOM API to encapsulate styles.</li>        </ul>                 If not supplied, the value is taken from the CompilerOptions which defaults to        ViewEncapsulation.Emulated.        If the policy is ViewEncapsulation.Emulated and the component has no styles nor {@link Component#styleUrls styleUrls},         the policy is automatically switched to ViewEncapsulation.None.         Visit the following resources to learn more:        <ul class="mt-6 space-y-1">          <li><a href="https://angular.dev/guide/components/styling#style-scoping" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Official Style Scoping</a></li>           <li><a href="https://angular.dev/api/core/Component#encapsulation" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Component API</a></li>        </ul>         </div>`,
      "orange",
      [],
      true,
      "10",
    ),
    "HTTP Vulnerabilities": new Data(
      "HTTP Vulnerabilities",
      `<h2>HTTP Vulnerabilities</h2>        <div class="flex-1">        <p>Understanding the basic terminologies, naming conventions, reserved words, conditions, functions, data structures, OOP, packages, etc.</p>        </div>               `,
      "orange",
      [],
      true,
      "10",
    ),
    "Angular SSG": new Data(
      "Angular SSG",
      `<h2>Angular SSG</h2>        <div class="flex-1">        <p>SSG (Static Site Generator), helps in building the HTML full website, during the process of building and serving that HTML Page. This method helps to generate the HTML website on the client side before its being served on the server side. Therefore, whenever a user requests a HTML Page, firstly HTML page will be rendered and secondly, the angular app will be rendered. The SSG can be used only if your website is static (or) it's content doesn't changes frequently.</p>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    Internationalization: new Data(
      "Internationalization",
      `<h2>Internationalization</h2>        <div class="flex-1">        <p>Internationalization, sometimes referenced as i18n, is the process of designing and preparing your project for use in different locales around the world. Localization is the process of building versions of your project for different locales.</p>        <ul class="mt-6 space-y-1">        <li>Visit the following resources to learn more:</li>        </ul>        <ul class="mt-6 space-y-1">        <li><a href="https://angular.dev/guide/i18n" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Official Docs - Internationalization</a></li>        <li><a href="https://lokalise.com/blog/angular-i18n" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular i18n</a></li>        <li><a href="https://github.com/jsverse/transloco" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Transloco</a></li>         <li><a href="https://github.com/ngx-translate/core" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Ngx Translate</a></li>        <li><a href="https://www.youtube.com/watch?v=hIz0OglmT0Q" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular 18 Multi-Language Support</a></li>        </ul>            </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Builtin pipes": new Data(
      "Builtin pipes",
      `<h2>Builtin pipes</h2>        <div class="flex-1">        <p>Use pipes to transform strings, currency amounts, dates, and other data for display. Pipes are simple functions to use in template expressions to accept an input value and return a transformed value. Pipes are useful because you can use them throughout your application, some common pipes are </p>         <ul class="mt-6 space-y-1">            <li> DatePipe </li>            <li> UpperCasePipe </li>            <li> LowerCasePipe </li>            <li> CurrencyPipe </li>            <li> DecimalPipe </li>            <li> PercentPipe </li>        </ul>        Visit the following resources to learn more:                <ul class="mt-6 space-y-1">            <a href="https://angular.dev/guide/pipes" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Understanding Pipes            </a>        <li><a href="https://codecraft.tv/courses/angular/pipes/built-in-pipes/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>BuiltIn Pipes - examples            </a></li>        </ul>        </div>`,
      "orange",
      [],
      true,
      "10",
    ),
    "Localize Package": new Data(
      "Localize Package",
      `<h2>Localize Package</h2>        <div class="flex-1">        <p>Understanding the basics is the key to a solid foundation. In this section, learn the basic terminologies, naming conventions, reserved words, conditions, functions, data structures, OOP, packages, etc.</p>         </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    AnalogJS: new Data(
      "AnalogJS",
      `<h2>AnalogJS</h2>        <div class="flex-1">        <p>AnalogJS is a full-stack meta-framework powered by Vite and Nitro for Angular. Analog supports both Server-Side Rendering (SSR) and Static Site Generation (SSG). Analog uses file-based routing and supports API (server) routes.</p>        <h3>Resources</h3>         <ul class="mt-6 space-y-1">        <li><a href="https://analogjs.org/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">AnalogJS Official Website</a></li>        <li><a href="https://www.youtube.com/watch?v=BSgpvP4eAGk" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Robin Goetz - AnalogJS - The Vite powered Angular meta-framework | NG Belgrade Conf 2024</a></li>        <li><a href="https://www.youtube.com/watch?v=VSCXOTCJpiI" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Full-stack Angular (SSR, file-based routing, + more) with AnalogJS</a></li>        <li><a href="https://www.youtube.com/watch?v=xTzEDQULo6s" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Is AnalogJS good enough for my blog site?</a></li>        </ul>         </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "XSRF Protection": new Data(
      "XSRF Protection",
      `<h2>XSRF Protection</h2>        <div class="flex-1">        <p>  Understanding the basics of XSRF protection is crucial for securing your web applications.         </p>        <ul class="mt-6 space-y-1">            <li>                XSRF (Cross-Site Request Forgery) attack exploits a vulnerability in website code where attackers can send malicious requests from different client sessions.</li>            <li>To prevent XSRF attacks, you need to implement robust protection mechanisms like</li>         </ul>        Visit the following resources to learn more:        <a href="https://www.example.com" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">XSRF</span>        </a>        <p>For more information, see the XSRF protection guide on our website: <a href="https://www.example.com/guide" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">XSRF Protection Guide</a></p>        `,
      "orange",
      [],
      true,
      "10",
    ),
    Case: new Data(
      "Case",
      `<h2>Case</h2>        <div class="flex-1">        <p>Understanding the basics is the key to a solid foundation. In this section, learn the basic terminologies, naming conventions, reserved words, conditions, functions, data structures, OOP, packages, etc.</p>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Cross-Site Scripting": new Data(
      "Cross-Site Scripting",
      `<h2>Cross-Site Scripting</h2>        <div class="flex-1">        <p> <b>Cross-Site Scripting (XSS)</b> is a type of security vulnerability that allows attackers to inject malicious scripts into web applications, which can then be executed by unsuspecting users.A common example of XSS occurs when an attacker modifies the HTML output of a webpage, such as through form inputs or social media posts. The injected script could redirect victims to a malicious website, steal their personal information, or cause other damage.</p>         <ul class="mt-6 space-y-1">            <li>Understanding Cross-Site Scripting</li>                <li>Types of XSS</li>                <li>Protecting against XSS</li>        </ul>         Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">            <a href="https://www.youtube.com/watch?v=81piDKqPxjQ" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Cross-Site Scripting</a><br>         </ul>           </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Angular CLI": new Data(
      "Angular CLI",
      `<h2>Angular CLI</h2>        <div class="flex-1">        <p>The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications directly from a command shell.  We can install angular latest CLI using the following command</p>        <ul class="mt-6 space-y-1">            <li> npm install -g @angular/cli </li>        </ul>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">           <a href="https://angular.dev/cli" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">               <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">CLI Reference</span>            </a>            <a href="https://angular.dev/tools/cli" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">               <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">The Angular CLI</span>           </a>        </ul>         </div>    `,
      "orange",
      [],
      true,
      "10",
    ),
    "Data Binding": new Data(
      "Data Binding",
      `<h2>Data Binding</h2>        <div class="flex-1">        <p>In an Angular template, a binding creates a live connection between a part of the UI created from a template (a DOM element, directive, or component) and the model (the component instance to which the template belongs). This connection can be used to synchronize the view with the model, to notify the model when an event or user action takes place in the view, or both. Angular's Change Detection algorithm is responsible for keeping the view and the model in sync. Bindings always have two parts: a target which will receive the bound value, and a template expression which produces a value from the model.</p>        <ul class="mt-6 space-y-1">        <li>  Visit the following resources to learn more:</li>        <li><a href="https://angular.dev/guide/templates/binding" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Official Docs - Understand Binding</a></li>        <li><a href="https://www.angularminds.com/blog/data-binding-in-angular" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Data Binding in Angular</a></li>        </ul>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "## @for": new Data(
      "## @for",
      `<h2>## @for</h2>        <div class="flex-1">        <p>The @for block repeatedly renders content of a block for each item in a collection.</p>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/api/core/@for" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular Official Docs - @for</span> </a></div> `,
      "orange",
      [],
      true,
      "10",
    ),
    Ngxs: new Data(
      "Ngxs",
      `<h2>Ngxs</h2>        <div class="flex-1">        <p>Ngxs is a state management pattern for the Angular framework. It acts as a single source of truth for our application. Ngxs is very simple and easily implementable. It reduce lots of boilerplate code .  It is a replacement for Ngrx. In Ngrx we are creating state, action, reducer, and effects but in Ngxs, we are creating only state and actions instead of all of this. Like Ngrx, Ngxs is also asynchronous and when we dispatch any action we can get a response back.</p>        <ul class="mt-6 space-y-1">            <li>Visit the following resources to learn more: </li>            <a href="https://www.ngxs.io/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">What is NGXS?</span>            </a><br>        </ul>         <p>          Ngxs: <br>          <a href="https://medium.com/@knoldus/introduction-to-ngxs-state-management-pattern-library-for-angular-ec76f681ceba" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Details about NGXS - Medium</a><br>        </p>         <ul class="mt-6 space-y-1">            <li>                <a href="https://www.youtube.com/watch?v=SGj11j4hxmg" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                Practice of NGXS                </a>            </li>        </ul>     </div>`,
      "orange",
      [],
      true,
      "10",
    ),
    "Feature Modules": new Data(
      "Feature Modules",
      `<h2>Feature Modules</h2>        <div class="flex-1">        <p>Understanding the basics is the key to a solid foundation. In this section, learn the basic terminologies, naming conventions, reserved words, conditions, functions, data structures, OOP, packages, etc.</p>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "AoT Compilation": new Data(
      "AoT Compilation",
      `<h2>AoT Compilation</h2>        <div class="flex-1">        <p>Angular applications require a compilation process before they can run in a browser. The Angular ahead-of-time (AOT) compiler converts your Angular HTML and TypeScript code into efficient JavaScript code during the build phase before the browser downloads and runs that code. Compiling your application during the build process provides a faster rendering in the browser.</p>        <ul class="mt-6 space-y-1">        <li>Visit the following resources to learn more: </li>        </ul>       <ul class="mt-6 space-y-1">        <a href="https://angular.dev/tools/cli/aot-compiler" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Ahead-of-time (AOT) compilation</a><br>        <a href="https://github.com/JeanMeche/angular-compiler-output" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">opensource</span>Angular Compiler Output </a><br>        <a href="https://blog.nashtechglobal.com/understanding-angulars-ahead-of-time-aot-compilation/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Understanding Angular's ahead of time compliation</a><br>         </ul>        </div>    `,
      "orange",
      [],
      true,
      "10",
    ),
    Standalone: new Data(
      "Standalone",
      `<h2>Standalone</h2>        <div class="flex-1">        <p>A standalone component is a component that sets <code>standalone: true</code> in its component metadata. Standalone components directly import other components, directives, and pipes used in their templates</p>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/guide/components/importing#standalone-components" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Standalone components</a><br>        <a href="https://angular.dev/api/core/Component#standalone" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Component - API</a>        </ul>        </div>`,
      "orange",
      [],
      true,
      "10",
    ),
    "Queries as Signals": new Data(
      "Queries as Signals",
      `<h2>Queries as Signals</h2>        <div class="flex-1">        <p>A component or directive can define queries that find child elements and read values from their injectors. Developers most commonly use queries to retrieve references to components, directives, DOM elements, and more. There are two categories of query: view queries and content queries.</p>        <ul class="mt-6 space-y-1">            <li>Visit the following resources to learn more:</li>        </ul>        <ul class="mt-6 space-y-1">            <a href="https://angular.dev/guide/signals/queries" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                Angular Official Docs - Queries as Signals            </a><br>            <a href="https://netbasal.com/querying-made-easy-exploring-angulars-query-signals" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                Querying made easy: exploring Angular's query signals             </a><br>            <a href="https://www.youtube.com/watch?v=b35ts9OinBc" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                Angular signal queries with the viewChild() and contentChild() functions            </a>        </ul>       </div>       `,
      "orange",
      [],
      true,
      "10",
    ),
    "Locales by ID": new Data(
      "Locales by ID",
      `<h2>Locales by ID</h2>        <div class="flex-1">        <p>This is the description for locales by ID.</p>         </div> `,
      "orange",
      [],
      true,
      "10",
    ),
    ContentChild: new Data(
      "ContentChild",
      `<h2>ContentChild</h2>        <div class="flex-1">        <p>Content queries retrieve results from the elements in the component's content— the elements nested inside the component in the template where it's used.</p>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/guide/signals/queries#content-queries" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">          <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Content queries - signal        </a><br>        <a href="https://angular.dev/guide/components/queries#content-queries" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">          <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Content queries        </a><br>        <a href="https://angular.dev/api/core/contentChild" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">          <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>contentChild - API        </a>        </ul>         </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Image Optimization": new Data(
      "Image Optimization",
      `<h2>Image Optimization</h2>        <div class="flex-1">        <p>The NgOptimizedImage directive makes it easy to adopt performance best practices for loading images.</p>        <ul class="mt-6 space-y-1">        <li> Visit the following resources to learn more:</li>        </ul>        <a href="https://angular.dev/guide/image-optimization" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Official Docs - Image Optimization </a><br>        <a href="https://medium.com/ngconf/automatic-adjustments-in-angulars-optimized-images-0034335e0374" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Automatic adjustments in Angular's optimized images</a><br>        <a href="https://angular.love/en/boost-your-applications-performance-with-ngoptimizedimage" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Boost your application's performance with NgOptimizedImage</a>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    Services: new Data(
      "Services",
      `<h2>Services</h2>        <div class="flex-1">        <p>Services let you define code or functionalities that are then accessible and reusable in many other components in the Angular project. It also helps you with the abstraction of logic and data that is hosted independently but can be shared across other components.</p>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">        <li><a href="https://angular.dev/guide/di/creating-injectable-service" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Creating an injectable service</a></li>        <li><a href="https://www.javatpoint.com/what-is-an-angular-service" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">What is an Angular Service</a></li>        <li><a href="https://www.knowledgehut.com/blog/web-development/make-api-calls-angular" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Service for API Calls</a></li>        <li><a href="https://www.positronx.io/angular-service-tutorial-with-example/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Service Tutorial with Example</a></li>        </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Custom Validators": new Data(
      "Custom Validators",
      `<h2>Custom Validators</h2>        <div class="flex-1">        <p>Custom validators in Angular are functions that allow you to define your own validation logic for form controls. They are used when the built-in validators (like required, minLength, etc.) do not meet your specific validation requirements. A custom validator is a function that returns either null if the form control is valid, or an object that represents the validation error if it is invalid. This object typically contains a key-value pair where the key is the error name and the value is a boolean or some details about the error.</p>        <ul class="mt-6 space-y-1">        <li>A custom validator allows you to check for specific requirements that might not be covered by default validators</li>        </ul>        Learn more from the following resources:<br>        <ul class="mt-6 space-y-1">            <a href="https://v17.angular.io/guide/form-validation#custom-validators" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Defining custom validators</a><br>            <a href="https://youtu.be/3TwmS0Gdg9I?si=1w4EX-HifJ70-CxT" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>How to create custom validator in Angular 17</a>        </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Pipes Precedence": new Data(
      "Pipes Precedence",
      `<h2>Pipes Precedence</h2>        <div class="flex-1">        <p>The pipe operator has a higher precedence than the JavaScript ternary operator.</p>        You should always use parentheses to be sure Angular evaluates the expression as you intend.</p>        <ul class="mt-6 space-y-1"><li>(condition ? a : b) | pipe</li></ul>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">          <a href="https://angular.dev/guide/pipes/precedence" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Precedence </a><br>          <a href="https://iq.js.org/questions/angular/what-is-the-precedence-between-pipe-and-ternary-operators" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>What is the precedence between pipe and ternary operators?</a>        </ul>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Template Ref Vars": new Data(
      "Template Ref Vars",
      `<h2>Template Ref Vars</h2>        <div class="flex-1">        <p>Understanding the basics is the key to a solid foundation. In this section, learn the basic terminologies, naming conventions, reserved words, conditions, functions, data structures, OOP, packages, etc.</p>                </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    Template: new Data(
      "Template",
      `<h2>Template</h2>        <div class="flex-1">        <p> template metadata is a property defined within the @Component decorator that specifies the HTML template for the component. It allows you to define the structure and layout of the component's view.</p>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">        <li><a href="https://angular.dev/guide/templates" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">         Template syntax</a></li>         <li><a href="https://angular.dev/api/core/Component#template" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Component - API </a></li>       </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "RxJS Basics": new Data(
      "RxJS Basics",
      `<h2>RxJS Basics</h2>        <div class="flex-1">        <p>Reactive Extensions for JavaScript, or RxJS, is a reactive library used to implement reactive programming to deal with async implementation, callbacks, and event-based programs.</p>        <ul class="mt-6 space-y-1">        <li>The reactive paradigm can be used in many different languages through the use of reactive libraries. These libraries are downloaded APIs that provide functionalities for reactive tools like observers and operators.</li>        </ul>        It can be used in your browser or with Node.js.        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Testing component templates": new Data(
      "Testing component templates",
      `<h2>Testing component templates</h2>        <div class="flex-1">        <p>With a component template, you can save and reuse component processes and properties and create components from them; template-based components inherit the template's properties and processes.</p>        <ul class="mt-6 space-y-1">        <li>Visit the following resources to learn more:</li>         <a href="https://angular.dev/guide/testing/components-scenarios" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            official            Component testing scenarios</a><br>        <a href="https://app.daily.dev/tags/testing?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            feed            Explore top posts about Testing</a>         </ul>    </div>  `,
      "orange",
      [],
      true,
      "10",
    ),
    "Component Anatomy": new Data(
      "Component Anatomy",
      `<h2>Component Anatomy</h2>        <div class="flex-1">        <p>Angular components are the foundational building blocks of Angular applications, designed to encapsulate both the UI and the business logic.</p>        <ul class="mt-6 space-y-1">            <li>Every component must have:</li>            <li>A TypeScript class with behaviors</li>            <li>An HTML template</li>            <li>A CSS selector</li>        </ul>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">            <a href="https://angular.dev/guide/components" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Anatomy of a component</span> </a>        </ul>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Testing Angular Apps": new Data(
      "Testing Angular Apps",
      `<h2>Testing Angular Apps</h2>        <div class="flex-1">        <p>In any software development process, Testing the application plays a vital role. If Bugs and crashes are not figured out and solved they can defame the development company as well as hurt the clients too. But, Angular’s architecture comes with built-in testability features. As soon as you create a new project with Angular CLI, two essential testing tools are installed.They are: Jasmine and Karma. Jasmine is the testing library which structures individual tests into specifications (“specs”) and suites. And Karma is the test runner, which enables the different browsers to run the tests mentioned by Jasmine and the browsers will finally report the test results back.</p>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "else if": new Data(
      "else if",
      `<h2>else if</h2>        <div class="flex-1">        <p>This is a basic syntax in programming. </p>     </div>     `,
      "orange",
      [],
      true,
      "10",
    ),
    " # @defer": new Data(
      " # @defer",
      `<h2> # @defer</h2>        <div class="flex-1">        <p>A type of block that can be used to defer load the JavaScript for components, directives and pipes used inside a component template. </p>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">        <li> - [@official@Angular Official Docs - @defer](https://angular.dev/api/core/@defer)</li> <li> - [@article@Angular Defer Complete Guide](https://blog.angular-university.io/angular-defer/)</li>  <li> - [@article@How to use Angular's defer block to improve performance](https://angular.love/en/how-to-use-angulars-defer-block-to-improve-performance)</li>        </ul>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Router outlets": new Data(
      "Router outlets",
      `<h2>Router outlets</h2>        <div class="flex-1">        <p>The router-outlet is a directive that's available from the @angular/router package and is used by the router to mark where in a template, a matched component should be inserted. </p>        <ul class="mt-6 space-y-1">            <li>Thanks to the router outlet, your app will have multiple views/pages and the app template acts like a shell of your application. Any element, you add to the shell will be rendered in each view, only the part marked by the router outlet will be changed between views.</li>        </ul>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">            <a href="https://angular.dev/guide/routing/router-reference#router-outlet" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Router reference - Router outlet</a>                    <a href="https://angular.dev/api/router/RouterOutlet" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Router outlet - API</a>        </ul>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "HttpClient CSRF": new Data(
      "HttpClient CSRF",
      `<h2>HttpClient CSRF</h2>        <div class="flex-1">        <p>Understanding the basics of HTTP Client CSRF is crucial for secure web development. Let's dive into how CSRF works and how to prevent it using the HttpClient library.</p>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Event Binding": new Data(
      "Event Binding",
      `<h2>Event Binding</h2>        <div class="flex-1">        <p>Event binding lets you listen for and respond to user actions such as keystrokes, mouse movements, clicks, and touches.</p>        <ul class="mt-6 space-y-1">            <li>Visit the following resources to learn more:</li>            <a href="https://angular.dev/guide/templates/event-binding" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular Official Docs</span>            </a>            <br>            <a href="https://www.knowledgehut.com/blog/web-development/event-binding-in-angular" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Event Binding in Angular</span>             </a>         </ul>        </div>           `,
      "orange",
      [],
      true,
      "10",
    ),
    "Language Service": new Data(
      "Language Service",
      `<h2>Language Service</h2>        <div class="flex-1">        <p>The Angular Language Service provides code editors with a way to get completions, errors, hints, and navigation inside Angular templates (external and in-line). Anytime you open an Angular application for the first time, an installation prompt will occur.</p>        <ul class="mt-6 space-y-1">         <li> Visit the following links to learn more: </li>        </ul>        <ul class="mt-6 space-y-1">          <a href="https://angular.dev/tools/language-service" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">             <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Official Docs</span>          </a>          <br> <a href="https://github.com/angular/vscode-ng-language-service" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">VS Code NG Language Service</span>        </a></li>    </div>  `,
      "orange",
      [],
      true,
      "10",
    ),
    "**@let**": new Data(
      "**@let**",
      `<h2>**@let**</h2>        <div class="flex-1">        <p>         &#x20; @let allows you to define a local variable and re-use it across the template.        </p>        <ul class="mt-6 space-y-1">        <li>To print output use —> System.out.println();</li>        <li>To take input from user —> Scanner or BufferedReader class can be used</li></ul>        Visit the following resources to learn more:        <br>        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/api/core/@let" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular Official Docs - @let</span>        </a><br>        <a href="https://nhannguyendevjs.medium.com/angulars-next-feature-let-syntax-afba6354112b" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular's Next feature let syntax</span>        </a>        </ul>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    Attributes: new Data(
      "Attributes",
      `<h2>Attributes</h2>        <div class="flex-1">        <p>Building accessible web experiences often involves setting Accessible Rich Internet Applications (ARIA) attributes to provide semantic meaning where it might otherwise be missing. Use attribute binding template syntax to control the values of accessibility-related attributes.</p>        <ul class="mt-6 space-y-1">                <li>Visit the following resources to learn more:</li>                <a href="https://angular.dev/best-practices/a11y#accessibility-attributes" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                    <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular Official Docs</span> - Accessibility Attributes</a><br>                <a href="https://web.dev/learn/accessibility/aria-html/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                    <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">ARIA HTML</span> </a><br>                <a href="https://yasikahivin.medium.com/comprehensive-accessibility-strategies-for-angular-apps-leveraging-aria-label-for-dynamic-content-fdf114834317" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                    <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Comprehensive Accessibility Strategies</span> for Angular Apps leveraging aria-label for Dynamic Content</a><br> </ul>         </div>       `,
      "orange",
      [],
      true,
      "10",
    ),
    "Angular Templates": new Data(
      "Angular Templates",
      `<h2>Angular Templates</h2>        <div class="flex-1">        <p>A Template is a form of HTML which tells Angular to go towards another component. To create many Angular features, special syntax within the templates is used.</p>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">            <a href="https://angular.dev/guide/templates" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span> Template Syntax</a><br>            <a href="https://app.daily.dev/tags/angular?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">feed</span> Explore top posts about Angular</a>        </ul>         </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Enforce Trusted Types": new Data(
      "Enforce Trusted Types",
      `<h2>Enforce Trusted Types</h2>        <div class="flex-1">        <p>It is recommended that you use Trusted Types as a way to help secure your applications from cross-site scripting attacks. Trusted Types is a web platform feature that can help you prevent cross-site scripting attacks by enforcing safer coding practices. Trusted Types can also help simplify the auditing of application code.</p>        <ul class="mt-6 space-y-1">        <li>Visit the following resources to learn more:</li>        <li><a href="https://angular.dev/best-practices/security#enforcing-trusted-types" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Official Docs - Enforcing Trusted Types</a></li>        <li><a href="https://w3c.github.io/trusted-types/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">W3C - Trusted Types</a></li>         <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">MDN Docs - Trusted Types API</a></li>        <li><a href="https://web.dev/articles/trusted-types#how-to-use-trusted-types" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">How to use Trusted Types</a></li>        </ul>         </div>      `,
      "orange",
      [],
      true,
      "10",
    ),
    "Lazy loading": new Data(
      "Lazy loading",
      `<h2>Lazy loading</h2>        <div class="flex-1">        <p>Lazy loading is a technique in Angular that allows you to load JavaScript components asynchronously when a specific route is activated. It improves the application load time speed by splitting the application into several bundles. The bundles are loaded as required when the user navigates through the app.</p>        <ul class="mt-6 space-y-1">            <li>Visit the following resources to learn more:</li>            <li><a href="https://angular.dev/guide/ngmodules/lazy-loading" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Official lazy loading feature modules</a></li>            <li><a href="https://www.youtube.com/watch?v=JjIQq9lh-Bw" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Tutorial - Lazy Loading</a></li>        </ul>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Router Events": new Data(
      "Router Events",
      `<h2>Router Events</h2>        <div class="flex-1">        <p>The Angular Router raises events when it navigates from one route to another route. It raises several events such as         NavigationStart, NavigationEnd, NavigationCancel, NavigationError, ResolveStart, etc. You can listen to these events and find out when the state of the route changes. Some of the useful events are route change start (NavigationStart) and route change end (NavigationEnd). </p>        <ul class="mt-6 space-y-1">           <li> - [@official@Router reference - Router events](https://angular.dev/guide/routing/router-reference#router-events)</li>         </ul>         <ul class="mt-6 space-y-1">        <li> - [@official@Router event - API](https://angular.dev/api/router/RouterEvent) </li>          </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "RxJS Operators": new Data(
      "RxJS Operators",
      `<h2>RxJS Operators</h2>        <div class="flex-1">        <p>RxJS is mostly useful for its operators, even though the Observable is the foundation. Operators are the essential pieces that allow complex asynchronous code to be easily composed in a declarative manner.</p>        <ul class="mt-6 space-y-1">            <li>Operators are functions. There are two kinds of operators:</li>                        <ul class="mt-4 space-y-1">                <li><strong>Pipeable Operators</strong> are the kind that can be piped to Observables using the syntax <code>observableInstance.pipe(operator()).</code> These include, <code>filter(...)</code>, and <code>mergeMap(...)</code>. When called, they do not change the existing Observable instance. Instead, they return a new Observable, whose subscription logic is based on the first Observable.</li>                <li><strong>Creation Operators</strong> are the other kind of operator, which can be called as standalone functions to create a new Observable. For example: <code>of(1, 2, 3)</code> creates an observable that will emit 1, 2, and 3, one right after another.</li>            </ul>        <p>          ## Piping        </p>        <p>Pipeable operators are functions, so they could be used like ordinary functions: op()(obs) — but in practice, there tend to be many of them convolved together, and quickly become unreadable: op4()(op3()(op2()(op1()(obs)))). For that reason, Observables have a method called .pipe() that accomplishes the same thing while being much easier to read:        </p>         <pre class="font-medium text-gray-800">             <code>obs.pipe(op1(), op2(), op3(), op4());          </code>         </pre>        <p>           ## Creation Operators        </p>        <p><strong>What are creation operators?</strong> Distinct from pipeable operators, creation operators are functions that can be used to create an Observable with some common predefined behavior or by joining other Observables.</p>         <ul class="mt-6 space-y-1">            <li>A typical example of a creation operator would be the interval function. It takes a number (not an Observable) as input argument, and produces an Observable as output:        </li>          <pre class="font-medium text-gray-800">              <code>import { interval } from 'rxjs';              const observable = interval(1000 /* number of milliseconds */);          </pre>       </ul>        Visit the following resources to learn more:            <a href="https://rxjs.dev/guide/operators#creation-operators-list" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Article</span>List of creation operators            </a>          <a href="https://rxjs.dev/guide/operators" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Full RxJS Operators Documentation</span>             </a>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Creating Libraries": new Data(
      "Creating Libraries",
      `<h2>Creating Libraries</h2>        <div class="flex-1">        <p>This section explores the process of creating libraries, which are collections of reusable code blocks. You will learn about:</p>         <ul class="mt-6 space-y-1">        <li>How to define and organize your library.</li>        <li>Best practices for naming conventions and structuring your code.</li>        </ul>         </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Developer Tools": new Data(
      "Developer Tools",
      `<h2>Developer Tools</h2>        <div class="flex-1">        <p>Understanding the basics is the key to a solid foundation. In this section, learn the basic terminologies, naming conventions, reserved words, conditions, functions, data structures, OOP, packages, etc.</p></div>`,
      "orange",
      [],
      true,
      "10",
    ),
    "Reusable Animations": new Data(
      "Reusable Animations",
      `<h2>Reusable Animations</h2>        <div class="flex-1">        <p>To create a reusable animation, use the animation() function to define an animation in a separate .ts file and declare this animation definition as a const export variable. You can then import and reuse this animation in any of your application components using the useAnimation() function.</p>        <ul class="mt-6 space-y-1">            <li>To create a reusable animation, use the animation() function to define an animation in a separate .ts file and declare this animation definition as a const export variable. You can then import and reuse this animation in any of your application components using the useAnimation() function.</li>        </ul>         Visit the following resources to learn more:        <ul class="mt-6 space-y-1">          <a href="https://angular.dev/guide/animations/reusable-animations" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular Official Docs - Reusable Animations</span>          </a><br>          <a href="https://catalincodes.com/posts/reusable-animations-with-angular" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Reusable Animations with Angular</span>          </a><br>        <video src="https://www.youtube.com/watch?v=ObYCutiBOTo" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black w-64 h-36" controls></video>        </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Testing Directives": new Data(
      "Testing Directives",
      `<h2>Testing Directives</h2>        <div class="flex-1">        <p>Directives are classes that add new behavior or modify the existing behavior to the elements in the template. Basically directives are used to manipulate the DOM, for example adding/removing the element from DOM or changing the appearance of the DOM elements.</p>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">          <li><a href="https://angular.dev/guide/testing/attribute-directives" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular</span> Testing Directives</a></li>          <li><a href="https://testing-angular.com/testing-directives/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Testing</span> Angular Directives</a></li>          <li><a href="https://app.daily.dev/tags/testing?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Explore</span> Top posts about Testing </a></li>         </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Template statements": new Data(
      "Template statements",
      `<h2>Template statements</h2>        <div class="flex-1">        <p>Template statements are methods or properties that you can use in your HTML to respond to user events. With template statements, your application can engage users through actions such as displaying dynamic content or submitting forms. Enclose the event in () which causes Angular to evaluate the right hand side of the assignment as one or more template statements chained together using semicolon ;. </p>        <ul class="mt-6 space-y-1">        <li>Visit the following resources to learn more:</li>          <a href="https://angular.dev/guide/templates/template-statements" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            Angular Official Website          </a><br>        <a href="https://angular.dev/guide/templates/template-statements#" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">          Understanding Template Statements        </a>        </ul>         </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    Selector: new Data(
      "Selector",
      `<h2>Selector</h2>        <div class="flex-1">        <p>In Angular, the selector metadata is a crucial property defined within the @Component decorator that specifies how the component can be identified and used in HTML templates. It determines the way the component is rendered in the DOM, allowing developers to create reusable and easily identifiable components.</p>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/guide/components/selectors" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Component selectors</a><br>        <a href="https://angular.dev/api/core/Component#selector" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Component - API</a>        </ul>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Creating Components": new Data(
      "Creating Components",
      `<h2>Creating Components</h2>        <div class="flex-1">        <p>You can either use Angular CLI to create the Angular components or create it manually.</p>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/tutorials/first-app" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Build your first Angular app</a><br>        <a href="https://angular.dev/essentials/components" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Components</a><br>        <a href="https://angular.dev/guide/components" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Angular CLI - ng generate components</a><br>        </ul>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Builtin directives": new Data(
      "Builtin directives",
      `<h2>Builtin directives</h2>        <div class="flex-1">        <p>SKDirectives are classes that add additional behavior to elements in your Angular applications. Use Angular's built-in directives to manage forms, lists, styles, and what users see.</p>        <h3>Built-in Directives</h3>        <ul class="mt-6 space-y-1">            <li> <b>NgClass</b> Adds and removes a set of CSS classes. </li>            <li><b>NgStyle</b> Adds and removes a set of HTML styles.  </li>            <li><b>NgModel</b> Adds two-way data binding to an HTML form element.</li> </ul>         Visit the following resources to learn more:        <ul class="mt-6 space-y-1">            <a href="https://angular.dev/guide/directives" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span> Built-in directives </a><br>             <a href="https://thinkster.io/tutorials/angular-2-directives" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span> BuiltIn Directives Types </a>         </ul>         </div>`,
      "orange",
      [],
      true,
      "10",
    ),
    "Build Environments": new Data(
      "Build Environments",
      `<h2>Build Environments</h2>        <div class="flex-1">        <p>Understanding the basics is the key to a solid foundation. In this section, learn the basic terminologies, naming conventions, reserved words, conditions, functions, data structures, OOP, packages, etc.</p>        </div>`,
      "orange",
      [],
      true,
      "10",
    ),
    Combination: new Data(
      "Combination",
      `<h2>Combination</h2>        <div class="flex-1">        <p>Combination operators in RxJS are used to combine multiple observables into a single observable. There are several types of combination operators, including:</p>        <ul class="mt-6 space-y-1">            <li><b>Merge:</b> merges multiple observables into a single observable that emits items from each source observable in a sequence.</li>             <li><b>Concat:</b> concatenates multiple observables into a single observable that emits the items from each source observable in sequence, one after the other.</li>            <li><b>Zip:</b> combines the items from multiple observables into a single observable by combining the items from each observable at a corresponding index.</li>             <li><b>CombineLatest:</b> combines the latest values from multiple observables into a single observable by emitting an item whenever any of the source observables emit an item.</li>             <li><b>WithLatestFrom:</b> combines the latest value from one observable with the latest values from multiple other observables.</li>            <li><b>ForkJoin:</b> combines the items from multiple observables into a single observable by emitting an item only after all of the source observables have emitted an item.</li>         </ul>        Further documentation can be found in the official RxJS documentation:</p>                 <ul class="mt-6 space-y-1">          <a href="https://rxjs.dev/api/operators/merge" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Merge</a>        <br>           <a href="https://rxjs.dev/api/operators/concat" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Concat</a>         <br>           <a href="https://rxjs.dev/api/operators/zip" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Zip</a>        <br>           <a href="https://rxjs.dev/api/operators/combineLatest" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">CombineLatest</a>         <br>         <a href="https://rxjs.dev/api/operators/withLatestFrom" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">WithLatestFrom</a>         <br>            <a href="https://rxjs.dev/api/index/function/forkJoin" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">ForkJoin</a>         </ul>         `,
      "orange",
      [],
      true,
      "10",
    ),
    Sanitization: new Data(
      "Sanitization",
      `<h2>Sanitization</h2>        <div class="flex-1">        <p>Understanding the basics is the key to a solid foundation. In this section, learn the basic terminologies, naming conventions, reserved words, conditions, functions, data structures, OOP, packages, etc.</p>        <ul class="mt-6 space-y-1"><li>To print output use —> System.out.println();</li>        <li>To take input from user —> Scanner or BufferedReader class can be used</li></ul>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">        <a href="https://www.youtube.com/watch?v=81piDKqPxjQ" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Java- Basic Syntax</a><br>        <a href="https://www.youtube.com/watch?v=RRubcjpTkks" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Java Tutorial for Beginners</a>        </ul>       </div>`,
      "orange",
      [],
      true,
      "10",
    ),
    "Inputs as Signals": new Data(
      "Inputs as Signals",
      `<h2>Inputs as Signals</h2>        <div class="flex-1">        <p>Signal inputs allow values to be bound from parent components. Those values are exposed using a Signal and can change during the lifecycle of your component.  Angular supports two variants of inputs: Optional and Required. </p>        <ul class="mt-6 space-y-1">        <li>Visit the following resources to learn more:</li>         <a href="https://angular.dev/guide/signals/inputs" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Angular Official Docs - Inputs as Signals</a><br>        <a href="https://blog.angular-university.io/angular-signal-inputs/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Angular Signal Inputs: Complete Guide to input() </a><br>        <a href="https://www.youtube.com/watch?v=yjCeaiWXC0U" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Angular's New Signal Inputs</a>         </ul>           </div>      `,
      "orange",
      [],
      true,
      "10",
    ),
    "Testing Requests": new Data(
      "Testing Requests",
      `<h2>Testing Requests</h2>        <div class="flex-1">        <p>This section dives into the fundamentals of testing requests. Learn how to:         </p>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Rate limiting": new Data(
      "Rate limiting",
      `<h2>Rate limiting</h2>        <div class="flex-1">        <p>Rate limiting in RxJS refers to the practice of restricting the rate at which events or data can be emitted from an observable. This can be useful in situations where the rate of incoming data is higher than the rate at which it can be processed, or where there are limits on the number of requests that can be made to a server. There are a few different operators in RxJS that can be used for rate limiting, such as throttleTime and sampleTime. These operators can be used to limit the rate of emissions from an observable by discarding emissions that occur too frequently. Another operator is auditTime it emits the last value from the source Observable during periodic time windows.</p>        <ul class="mt-6 space-y-1">            <li>Visit the following resources to learn more:</li>            <li><a href="https://rxjs.dev/api/operators/throttleTime" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Throttle Time</a></li>             <li><a href="https://rxjs.dev/api/operators/sampleTime" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Sample Time</a></li>         </ul>        Visit the following resources to learn more:            <br>            <ul class="mt-6 space-y-1">                <a href="https://blog.angular-university.io/functional-reactive-programming-for-angular-2-developers-rxjs-and-observables/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Blogs and tutorials on RxJS</a>            </ul>         </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Creating Modules": new Data(
      "Creating Modules",
      `<h2>Creating Modules</h2>        <div class="flex-1">        <p>Creating modules in Angular helps organize your application into manageable, cohesive units. Each module can encapsulate related components, directives, pipes, and services. Here's a detailed guide on how to create and use modules in Angular.</p>   <ul class="mt-6 space-y-1">    <li>Visit the following resources to learn more:</li>    <a href="https://angular.dev/guide/ngmodules/feature-modules" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">      <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular Official Docs</span> (Feature Modules) </a>   </ul>           </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    Configuration: new Data(
      "Configuration",
      `<h2>Configuration</h2>        <div class="flex-1">        <p>The configuration of routes in an Angular application involves defining route mappings in an array and providing these routes to the Angular router.</p>        <h3>Example routes:</h3>        <ul class="mt-6 space-y-1">          <li>            'custom-path': defining a new url route.          </li>          <li>            'custom-path/:id': defining _**id**_ parameter.          </li>          <li>            '' (empty path): instantiate a component without the need for defining a new url route.           </li>          <li>            '**': for undefined paths.          </li>        </ul>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">          <a href="https://angular.dev/guide/routing/router-reference#configuration" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Official</span> Router reference - Configuration</a>         </ul>      </div>    `,
      "orange",
      [],
      true,
      "10",
    ),
    "Model Inputs": new Data(
      "Model Inputs",
      `<h2>Model Inputs</h2>        <div class="flex-1">        <p>Model inputs are a special type of input that enable a component to propagate new values back to another component.  Use model inputs in components that exist to modify a value based on user interaction.</p>         <ul class="mt-6 space-y-1">            <li>Model inputs allow components to respond to changes made by other components, enabling two-way communication.</li>        </ul>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">            <a href="https://angular.dev/guide/signals/model" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Angular Official Docs - Model Inputs</a><br>             <a href="https://www.youtube.com/watch?v=frXIBKqzTK0" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Angular's New Model Inputs: Two-way Communication with your Child Components</a><br>            <a href="https://www.codemotion.com/magazine/frontend/angular-model-inputs-two-way-binding-inputs-with-signals/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Angular Model Inputs: Two-way binding inputs with signals</a><br>            <a href="https://dev.to/this-is-angular/model-inputs-reactive-two-way-binding" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Model Inputs: Reactive two-way binding </a><br>         </ul>         </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    Dependencies: new Data(
      "Dependencies",
      `<h2>Dependencies</h2>        <div class="flex-1">        <p>Understanding the basics is the key to a solid foundation. In this section, learn the basic terminologies, naming conventions, reserved words, conditions, functions, data structures, OOP, packages, etc.</p>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Input output": new Data(
      "Input output",
      `<h2>Input output</h2>        <div class="flex-1">        <p> @Input() and @Output() give a child component a way to communicate with its parent component.  @Input() lets a parent component update data in the child component. Conversely, @Output() lets the child send data to a parent component.</p>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/guide/components/inputs" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">          <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Angular Official Website - inputs</a><br>        <a href="https://angular.dev/guide/components/outputs" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">          <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Angular Official Website - outputs</a>        </ul>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    Accessibility: new Data(
      "Accessibility",
      `<h2>Accessibility</h2>        <div class="flex-1">        <p>The web is used by a wide variety of people, including those who have visual or motor impairments. A variety of assistive technologies are available that make it much easier for these groups to interact with web-based software applications. Also, designing an application to be more accessible generally improves the user experience for all users.</p>        <ul class="mt-6 space-y-1">         <li>Visit the following resources to learn more:</li>        <li><a href="https://angular.dev/best-practices/a11y" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Official Docs - Accessibility</a></li>        <li><a href="https://web.dev/learn/accessibility/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Learn Accessibility</a></li>        <li><a href="https://angularindepth.com/posts/1152/angular-a11y-11-tips-on-how-to-make-your-apps-more-accessible" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular a11y: 11 tips on how to make your apps more accessible</a></li>        </ul>        </div>          `,
      "orange",
      [],
      true,
      "10",
    ),
    "Setting Up the Client": new Data(
      "Setting Up the Client",
      `<h2>Setting Up the Client</h2>        <div class="flex-1">        <p>Before you can use HttpClient in your app, you must configure it using dependency injection. HttpClient is provided using the provideHttpClient helper function, which most apps include in the application providers in app.config.ts. If your app is using NgModule-based bootstrap instead, you can include provideHttpClient in the providers of your app's NgModule. </p>        <ul class="mt-6 space-y-1">            <li><a href="https://angular.dev/guide/http/setup" target="_blank">Angular Official Docs - Setting up HttpClient</a></li>         </ul>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">            <li><a href="https://www.youtube.com/watch?v=hBFtim1vO3M" target="_blank">Setting up HttpClient in Angular (NgModule)</a></li>         </ul>    </div>`,
      "orange",
      [],
      true,
      "10",
    ),
    "Zone Pollution": new Data(
      "Zone Pollution",
      `<h2>Zone Pollution</h2>        <div class="flex-1">        <p>Please provide more context about the content you want to convert to HTML. For example, if you have a table of data or lists of items, let me know and I can help with the HTML.</p>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    Metadata: new Data(
      "Metadata",
      `<h2>Metadata</h2>        <div class="flex-1">        <p>Metadata in Angular components refers to the configuration information that is used to define and configure the behavior of a component. It is specified using decorators, which are functions that add metadata to classes, properties, and methods.</p>         <ul class="mt-6 space-y-1">        <li>Metadata in Angular components refers to the configuration information that is used to define and configure the behavior of a component. It is specified using decorators, which are functions that add metadata to classes, properties, and methods.</li> </ul>         Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/api/core/Component" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">        <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Component</span> API</a><br>         </ul>         </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Angular and History": new Data(
      "Angular and History",
      `<h2>Angular and History</h2>        <div class="flex-1">        <p>Angular is a web framework that empowers developers to build fast, reliable applications.</p>        <ul class="mt-6 space-y-1">            <li>Maintained by a dedicated team at Google, Angular provides a broad suite of tools, APIs, and libraries to simplify and streamline your development workflow. </li>            </ul>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">          <a href="https://angular.dev/overview" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>What is Angular? </a>        </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "UI Components": new Data(
      "UI Components",
      `<h2>UI Components</h2>        <div class="flex-1">        <p>The Angular Material library, which is maintained by the Angular team, is a suite of reusable UI components that aims to be fully accessible. The Component Development Kit (CDK) includes the a11y package that provides tools to support various areas of accessibility.</p>        <ul class="mt-6 space-y-1">            <li>Visit the following resources to learn more:</li>            <a href="https://angular.dev/best-practices/a11y#angular-ui-components" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular Official Docs</span>             </a><br>            <a href="https://material.angular.io/cdk/a11y/overview" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">a11y overview</span>             </a>        </ul>        </div>`,
      "orange",
      [],
      true,
      "10",
    ),
    Library: new Data(
      "Library",
      `<h2>Library</h2>        <div class="flex-1">        <p>Use the Angular CLI and the npm package manager to build and publish your library as an npm package.</p>       Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/tools/libraries/creating-libraries" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">           <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Angular Website</a><br>         </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "**@else**": new Data(
      "**@else**",
      `<h2>**@else**</h2>        <div class="flex-1">        <p>Understanding the basics is the key to a solid foundation. In this section, learn the basic terminologies, naming conventions, reserved words, conditions, functions, data structures, OOP, packages, etc.</p>         </div> `,
      "orange",
      [],
      true,
      "10",
    ),
    "Making Requests": new Data(
      "Making Requests",
      `<h2>Making Requests</h2>        <div class="flex-1">        <p>HttpClient has methods corresponding to the different HTTP verbs used to make requests, both to load data and to apply mutations on the server. Each method returns an RxJS Observable which, when subscribed, sends the request and then emits the results when the server responds.</p>        <ul class="mt-6 space-y-1">         <li>Each method of            the            HttpClient  returns an            RxJS Observable, which, upon subscribing, sends the request and then emits the results when the server responds.</li>        </ul>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">         <a href="https://angular.dev/guide/http/making-requests" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            Angular Official Docs - Making requests</a><br>         <a href="https://www.youtube.com/watch?v=3vQpYKlHmS0" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            How to make HTTP request in Angular 18</a>        </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Testing Component Bindings": new Data(
      "Testing Component Bindings",
      `<h2>Testing Component Bindings</h2>        <div class="flex-1">        <p>Angular processes all data bindings once for each JavaScript event cycle, from the root of the application component tree through all child components. Data binding plays an important role in communication between a template and its component, and is also important for communication between parent and child components.</p>        <ul class="mt-6 space-y-1">            <li>Data binding plays an important role in communication between a template and its component, and is also important for communication between parent and child components.</li>        </ul>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">            <a href="https://angular.dev/guide/components" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Angular Website</a><br>            <a href="https://app.daily.dev/tags/testing?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">feed</span>Explore top posts about Testing</a>        </ul>         </div>    `,
      "orange",
      [],
      true,
      "10",
    ),
    "Testing Pipes": new Data(
      "Testing Pipes",
      `<h2>Testing Pipes</h2>        <div class="flex-1">        <p>An Angular Pipe is a special function that is called from a Component template. Its purpose is to transform a value: You pass a value to the Pipe, the Pipe computes a new value and returns it.</p>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">            <a href="https://angular.dev/guide/testing/pipes" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Testing pipes</a><br>            <a href="https://testing-angular.com/testing-pipes/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Testing pipes examples</a><br>            <a href="https://app.daily.dev/tags/testing?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">feed</span>Explore top posts about Testing</a>        </ul>        </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    Interpolation: new Data(
      "Interpolation",
      `<h2>Interpolation</h2>        <div class="flex-1">        <p>Interpolation refers to embedding expressions into marked up text. By default, interpolation uses the double curly braces {{ and }} as delimiters. Angular replaces currentCustomer with the string value of the corresponding component property.</p>         <ul class="mt-6 space-y-1"><li>Visit the following resources to learn more:</li>        <li><a href="https://angular.dev/guide/templates/interpolation" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Angular Official Website</a></li>         <li><a href="https://angular.dev/guide/displaying-values-with-interpolation" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">Displaying values with interpolation</a></li>       </ul>        </div> `,
      "orange",
      [],
      true,
      "10",
    ),
    "Lifecycle Hooks": new Data(
      "Lifecycle Hooks",
      `<h2>Lifecycle Hooks</h2>        <div class="flex-1">        <p>A component instance has a lifecycle that starts when Angular instantiates the component class and renders the component view along with its child views. The lifecycle continues with change detection, as Angular checks to see when data-bound properties change, and updates both the view and the component instance as needed. The lifecycle ends when Angular destroys the component instance and removes its rendered template from the DOM.</p>        <ul class="mt-6 space-y-1">            <li>Your application can use lifecycle hook methods to tap into key events in the lifecycle of a component or directive to initialize new instances, initiate change detection when needed, respond to updates during change detection, and clean up before deletion of instances.</li>        </ul>        <ul class="mt-6 space-y-1">            The following life cycle hooks of angular are:                <li>OnChanges</li>                <li>OnInit</li>                <li>DoCheck</li>                <li>OnDestroy</li>                <li>AfterContentInit</li>                <li>AfterContentChecked</li>                <li>AfterViewInit</li>                <li>AfterViewChecked</li>        </ul>        Visit the following resources to learn more:                 <ul class="mt-6 space-y-1">            <a href="https://angular.dev/guide/components/lifecycle" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span> Component Lifecycle</a>          </ul>        <ul class="mt-6 space-y-1">            <a href="https://blog.logrocket.com/angular-lifecycle-hooks/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">the life cycle hooks of angular</span> - Blog </a>        </ul>          <ul class="mt-6 space-y-1">            <a href="https://app.daily.dev/tags/react-hooks?ref=roadmapsh" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Explore top posts about React Hooks</span>             </a>          </ul>        </div>    `,
      "orange",
      [],
      true,
      "10",
    ),
    Forms: new Data(
      "Forms",
      `<h2>Forms</h2>        <div class="flex-1">        <p>Forms are used to handle user inputs in many applications. It enables users from entering sensitive information to performing several data entry tasks.</p>        <ul class="mt-6 space-y-1">            <li>Angular provides two approaches to handle user inputs trough forms: reactive and template-driven forms.</li>         </ul>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">            <a href="https://angular.dev/guide/forms" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Forms in Angular</a><br>            <a href="https://www.youtube.com/watch?v=-bGgjgx3fGs" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Angular Forms Tutorial</a><br>            <a href="https://www.youtube.com/watch?v=hAaoPOx_oIw" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">video</span>Building Forms in Angular Apps</a><br>         </ul>           </div>         `,
      "orange",
      [],
      true,
      "10",
    ),
    "Custom Pipes": new Data(
      "Custom Pipes",
      `<h2>Custom Pipes</h2>        <div class="flex-1">        <p>Pipes to transform strings, currency amounts, dates, and other data for display. Pipes are simple functions in template expressions to accept an input value and return a transformed value. Pipes are helpful because you can use them throughout your application while only declaring each pipe once. For example, you would use a pipe to show the date as April 15, 1988, rather than the raw string format.</p>        <ul class="mt-6 space-y-1">        <li>Visit the following resources to learn more:</li>        </ul>        <ul class="mt-6 space-y-1">        <a href="https://angular.dev/guide/pipes/transform-data" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            Custom pipes for new transforms</a>        <br>        <a href="https://www.youtube.com/watch?v=P2587FN4Y0w" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            Create a custom pipe video for Beginners</a>        </ul>        `,
      "orange",
      [],
      true,
      "10",
    ),
    Elf: new Data(
      "Elf",
      `<h2>Elf</h2>        <div class="flex-1">        <p>Elf is a reactive immutable state management solution built on top of RxJS. It uses custom RxJS operators to query the state and pure functions to update it. Elf encourages simplicity. It saves you the hassle of creating boilerplate code and offers powerful tools with a moderate learning curve, suitable for experienced and inexperienced developers alike.</p>        <ul class="mt-6 space-y-1">        <li>Visit the following resources to learn more:</li>        <li><a href="https://ngneat.github.io/elf/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>What is Elf?</a></li>        <li><a href="https://github.com/ngneat/elf" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">opensource</span>Elf</a></li>        <li><a href="https://github.com/ngneat/elf-ng-router-store" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">opensource</span>Elf NG Router Store</a></li>        <li><a href="https://medium.com/@gronichomer/case-study-elf-%EF%B8%8F%EF%B8%8F-part-1-fe5e87c31c89" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Case Study: Elf</a></li>        </ul>        </div>`,
      "orange",
      [],
      true,
      "10",
    ),
    "Attribute Binding": new Data(
      "Attribute Binding",
      `<h2>Attribute Binding</h2>        <div class="flex-1">        <p>Attribute binding in Angular helps you set values for attributes directly. With attribute binding, you can improve accessibility, style your application dynamically, and manage multiple CSS classes or styles simultaneously.</p>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">        <li><a href="https://angular.dev/guide/templates/attribute-binding" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            Angular Official Docs - Attribute Binding</a></li>        <li><a href="https://stackoverflow.com/questions/76967327/what-is-difference-between-binding-to-attribute-and-binding-to-property-in-angul" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">What is difference between binding to attribute and binding to property in Angular?</a></li>        </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "State Management": new Data(
      "State Management",
      `<h2>State Management</h2>        <div class="flex-1">        <p>Application state management is the process of maintaining knowledge of an application's inputs across multiple related data flows that form a complete business transaction -- or a session -- to understand the condition of the app at any given moment. In computer science, an input is information put into the program by the user and state refers to the condition of an application according to its stored inputs -- saved as variables or constants. State can also be described as the collection of preserved information that forms a complete session.</p>        <ul class="mt-6 space-y-1">        <li>State Management is maintaining knowledge about the app's state across multiple data flows to understand its current condition at any given point in time</li>         </ul>        Visit the following resources to learn more:        <ul class="mt-6 space-y-1">            <a href="https://www.techtarget.com/searchapparchitecture/definition/state-management" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">What is State Management?</span>            </a><br>            <a href="https://blog.logrocket.com/angular-state-management-made-simple-with-ngrx/" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular state management made simple with NgRx</span>             </a><br>            <a href="https://www.syncfusion.com/blogs/post/angular-state-management-with-ngrx.aspx" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">Angular State Management with NgRx</span>             </a><br>            <a href="https://thefullstack.engineer/full-stack-development-series-part-10-state-management-and-the-facade-pattern-in-angular" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">State Management and the Facade pattern in Angular</span>             </a><br>        </ul>        </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
    "Route Guards": new Data(
      "Route Guards",
      `<h2>Route Guards</h2>        <div class="flex-1">        <p>Use route guards to prevent users from navigating to parts of an application without authorization.</p>          <ul class="mt-6 space-y-1">            <li>Angular route guards are interfaces provided by Angular that, when implemented, allow us to control the accessibility of a route based on conditions provided in function implementation of that interface.</li>            </ul>          <p>Some types of angular guards are             CanActivate, CanActivateChild, CanDeactivate, CanMatch and Resolve. </p>         Visit the following resources to learn more:    <br>    <ul class="mt-6 space-y-1">        <a href="https://angular.dev/guide/routing/common-router-tasks#preventing-unauthorized-access" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Preventing unauthorized access </a><br>        <a href="https://angular.dev/api/router/Resolve" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">            <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Resolve</a>     </ul>        </div>    `,
      "orange",
      [],
      true,
      "10",
    ),
    "Typed Forms": new Data(
      "Typed Forms",
      `<h2>Typed Forms</h2>        <div class="flex-1">        <p>Understanding the basics is the key to a solid foundation. In this section, learn the basic terminologies, naming conventions, reserved words, conditions, functions, data structures, OOP, packages, etc.</p>         </div>   <!-- **Important:** This example assumes you have Bootstrap in your project and would be using its form elements for styling. --> `,
      "orange",
      [],
      true,
      "10",
    ),
    Animation: new Data(
      "Animation",
      `<h2>Animation</h2>        <div class="flex-1">        <p>Angular's animation system is built on CSS functionality, which means you can animate any property that the browser considers animatable. This includes positions, sizes, transforms, colors, borders, and more.</p>        Visit the following resources to learn more:<br>        <ul class="mt-6 space-y-1">            <a href="https://angular.dev/guide/animations" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">official</span>Angular Official Docs - Animation</a><br>            <a href="https://www.angularminds.com/blog/angular-animations-a-beginners-guide" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>Angular Animations - A Beginner's Guide</a><br>            <a href="https://github.com/williamjuan027/angular-animations-explorer" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">opensource</span>Angular Animations Explorer</a><br>            <a href="https://angularindepth.com/posts/1285/in-depth-guide-into-animations-in-angular" target="_blank" class="group font-medium text-gray-800 underline underline-offset-1 hover:text-black">                <span class="mr-2 inline-block rounded px-1.5 py-0.5 text-xs uppercase no-underline bg-purple-300">article</span>In-Depth guide into animations in Angular</a><br>         </ul>        </div>`,
      "orange",
      [],
      true,
      "10",
    ),
    "Dynamic Components": new Data(
      "Dynamic Components",
      `<h2>Dynamic Components</h2>        <div class="flex-1">        <p>Understand the basic principles of dynamic components for a deeper analysis and more efficient coding. </p>         </div>        `,
      "orange",
      [],
      true,
      "10",
    ),
  };
}
